"use strict";

/**
 *  require modules needed
 */
var request = require("request");
var arrayQuery = require('array-query');

function nodeCodeReview() {
    return new CodeReview();
}

function CodeReview() {

}

CodeReview.prototype.getSourceControl = function (params, callback) {
    try {
        getSourceControlTool(params, callback);
    } catch (err) {
        console.log('GetSourceControl==========>', err);
        callback({ statusCode: gConfig.errorConstant.COMMAND_ERROR });
    }
}

function getSourceControlTool(params, callback) {
    try {
        console.log("******** Start :: modules.CodeReview.getSourceControlTool *************************");
        if ((params != null || params != undefined) && params.orgProject != null) {
            var organizationProject = params.orgProject;
            console.log("!!!!!!!!!!!!!!!!!!========>" + organizationProject.integrationID);
            //if (orgSourceControlIntegration.SourceControl.toLowerCase() === "visualstudio") {
            if (organizationProject.integrationID.toString() === "556f3402edcc1de73a34e716") {
                console.log('GetSourceControl==========> visualstudio ');
                callback({ statusCode: 0, sourceControl: "visualstudio" });
            }
        }
    } catch (err) {
        callback({ statusCode: 100, errorMessage: JSON.stringify(err) });
    }
}

CodeReview.prototype.getProjectRulesByCategory = function (params, categoryParams, callback) {
    try {
        var searchQuery = 'project_rules_' + params.emitData.header.organizationID + '_' + params.emitData.header.projectID;
        _gConfig.redisClient.getData(searchQuery, function (result) {
            if (result == null) {
                //var condition = { projectID: params.emitData.header.projectID , category: categoryParams.category, subcategory: categoryParams.subcategory };
                var condition = { projectID: params.emitData.header.projectID  };
                _gConfig.Projectrules.findOne(condition).exec(function (err, resProjectRules) {
                    if (err) {
                        callback({ statusCode: 100 });
                    } 
                    else {
                        if (resProjectRules && resProjectRules.rules && resProjectRules.rules.length) {
                            var configuredRules = arrayQuery('lintType').is(categoryParams.subcategory.toLowerCase()).on(resProjectRules.rules);
                            callback({ statusCode: 0, data: configuredRules });
                        } else {
                            //Return default rules
                            callback({ statusCode: 100,errorMessage:'No project rules found'});
                        }
                    }
                });
            } else {
                //var configuredRules = arrayQuery('category').is(categoryParams.category).and('subcategory').is(categoryParams.subcategory).on(result.rules);
                var configuredRules = arrayQuery('lintType').is(categoryParams.subcategory.toLowerCase()).on(result.rules);
                callback({ statusCode: 0, data: configuredRules });
            }
        });
    } 
    catch (err) {
        callback({ statusCode: 100, errorMessage: JSON.stringify(err) });
    }

}

CodeReview.prototype.getCodeBlockFromFileName = function (filename, lineNo, callback) {
    try {
        var data = fs.readFileSync(filename, 'utf8');
        var lines = data.split("\n");
        
        if (+lineNo > lines.length) {
            callback({ statusCode: 100, errorMessage: 'File end reached without finding line' });
        }
        callback({ statusCode: 0, codeLines: lines [+lineNo] });
    }
    catch (err) {
        console.log('-----------------------------------------');
        console.log('@@ INSIDE CATCH CodeReview.prototype.getCodeBlockFromFileName ::==> err ::=>> ' + err);
        callback({ statusCode: 500, errorMessage: err });
    }
}

CodeReview.prototype.getCodeBlockFromFileData = function (data, lineNo, callback) {
    try {
        var lines = data.split("\n");
        var actualLineNo = lineNo - 1;
        
        if (+lineNo > lines.length) {
            callback({ statusCode: 100, errorMessage: 'File end reached without finding line' });
        }
        var codeBlock = [];
        
        for (var i = actualLineNo - 2; i <= actualLineNo + 2; i++) {
            if (typeof (lines[i]) !== 'undefined') {
                var codeLine = {};
                codeLine.lineNo = i + 1;
                codeLine.line = lines[i];
                codeBlock.push(codeLine);
            }
        }
        callback({ statusCode: 0, codeBlock: codeBlock });
    } catch (err) {
        console.log('-----------------------------------------');
        console.log('@@ INSIDE CATCH CodeReview.prototype.getCodeBlockFromFileData ::==> err ::=>> ' + err);
        callback({ statusCode: 500, errorMessage: err });
    }
}

module.exports.nodeCodeReview = nodeCodeReview;

