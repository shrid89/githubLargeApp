"use strict";

/**
 * @Easy and simple way of communication between VisualStudio with nodeJS
 * @author Aloha
 */

/**
 *  require modules needed
 */
var request = require("request");
var fs = require('fs');
var csslint = require('csslint').CSSLint;
var arrayQuery = require('array-query');
var exec = require('child_process').execFile;

/**
 * Create VisualStudio instance
 * @param {type} token
 * @returns {VisualStudio}
 */

function nodeStyleCop(options) {
    return new StyleCop();
}

function StyleCop(options) {
}


StyleCop.prototype.applyCodeReviewRules = function (params, callback) {
    console.log('** START ::==> StyleCop.prototype.applyCodeReviewRules ');
    console.log('-----------------------------------------------------------');
    getStyleCopCodeReview(callback, params);
}

function getStyleCopCodeReview(callback, params) {
    try {
        console.log('** START ::==> StyleCop.prototype.getStyleCopCodeReview ');
        console.log('-----------------------------------------------------------');
        var projectRules = [];
        //applyProjectRules(params, projectRules, callback);
        
        //Commented below code since not yet clear about rule configuration with new desing.

        var categoryParams = {};
        categoryParams.category = 'csharp';
        categoryParams.subcategory = 'stylecop';
        
        _allModule.CodeReview.getProjectRulesByCategory(params, categoryParams, function (res) {
            if (res.statusCode) {
                callback({ statusCode: 100 });
            }
            else {
                var projectRules = res.data;
                applyProjectRules(params, projectRules, callback);
            }
        });
    } catch (err) {
        console.log('@@ INSIDE CATCH ::==> StyleCop.prototype.getStyleCopCodeReview----------------------------' + err);
        console.log('-----------------------------------------------------------');
        callback({ statusCode: 500 });
    }
}

function applyProjectRules(params, projectRules, callback) {
    try {
        var isFileCritical = false;
        console.log('** START ::==> StyleCop.prototype.applyProjectRules ');
        console.log('-----------------------------------------------------------');

        var data = params.downloadContent.metaData;
        
        var codeReviewCommentsResponse = {};
        var arrCodeReviewComments = [];
        var ruleTypeCounts = {}
        
        var pathArr = params.downloadContent.physicalFilePath.split("\\");
        var updatedFilePath = pathArr.join('\\\\');
        
        var args = [];
        args.push(updatedFilePath);
        console.log('** BEFOR CALLING _styleCopConsoleApp ::==> StyleCop.prototype.applyProjectRules ');
        
        exec(_styleCopConsoleApp, args, function (err, stCodeReviwComments, stError) {
            if (err) {
                console.log('@@ ERROR ::==> AFTER EXECUTION OF _styleCopConsoleApp ==> ERROR IS ::=> ' + err);
                console.log('-----------------------------------------------------------');
                callback({ statusCode: 1000 });
            } else {
                console.log('** SUCCESS ::==> AFTER EXECUTION OF _styleCopConsoleApp, stCodeReviwComments ::==> ' + JSON.stringify(stCodeReviwComments));
                console.log('-----------------------------------------------------------');
                if (stCodeReviwComments !== null && typeof (stCodeReviwComments) !== 'undefined') {
                    
                    stCodeReviwComments = JSON.parse(stCodeReviwComments);
                    
                    stCodeReviwComments.forEach(function (errorMessage, index) {
                        
                        //Commented below code since not yet clear about rule configuration with new desing.
                        var configuredRule = arrayQuery('checkID').is(errorMessage.checkID).on(projectRules).pop();
                        if (typeof (configuredRule) === 'undefined' || configuredRule === null) {
                            return;
                        }
                        
                        //Check if this rule is critical
                        if (configuredRule.isCriticle) {
                            isFileCritical = true;
                        }

                        var commentRes = {};
                        _allModule.CodeReview.getCodeBlockFromFileData(data, errorMessage.codeLineNo, function (res) {
                            if (res.statusCode) {
                                console.log('@@ Error inside StyleCop.getCodeBlockFromFileData ::==>' + res.errorMessage);
                            }
                            else {
                                console.log('-----------------------------------------');
                                console.log('**==> Lines returns inside StyleCop.getLineByFileData ::==>');
                                commentRes.codeBlock = res.codeBlock;
                            }

                            commentRes.codeLineNo = errorMessage.codeLineNo;
                            commentRes.checkID = errorMessage.checkID;
                            commentRes.comment = errorMessage.comment;
                            commentRes.fileType = configuredRule.fileType;
                            commentRes.lintType = configuredRule.lintType;
                            commentRes.ruleType = configuredRule.ruleType;
                             commentRes.score = parseInt(configuredRule.score);
                            commentRes.type = 'singleline';
                            arrCodeReviewComments.push(commentRes);
                            
                            if (ruleTypeCounts[configuredRule.ruleType] === undefined) {
                                //ruleTypeCounts[configuredRule.ruleType] = [];
                                ruleTypeCounts[configuredRule.ruleType] = 1;
                            } else {
                                var cnt = ruleTypeCounts[configuredRule.ruleType];
                                cnt = cnt + 1;
                                ruleTypeCounts[configuredRule.ruleType] = cnt;
                            }
                        });
                    });
                    codeReviewCommentsResponse.isFileCritical = isFileCritical;
                    codeReviewCommentsResponse.ruleTypeCounts = ruleTypeCounts;
                    codeReviewCommentsResponse.codeReviewComments = arrCodeReviewComments;
                }
                callback({ statusCode: 0, data: codeReviewCommentsResponse });
            }
            
        });
        console.log('-----------------------------------------');
    }
    catch (err) {
        console.log('----------------------applyProjectRules-err------------------');
        callback({ statusCode: 500, errorMessage: err });
    }
}

module.exports.nodeStyleCop = nodeStyleCop;

