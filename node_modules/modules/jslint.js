"use strict";

/**
 * @Easy and simple way of communication between VisualStudio with nodeJS
 * @author Aloha
 */

/**
 *  require modules needed
 */
var request = require("request");
var fs = require('fs');
var arrayQuery = require('array-query');

/**
 * Create VisualStudio instance
 * @param {type} token
 * @returns {VisualStudio}
 */

function nodeJsLint(options) {
    return new JsLint();
}

function JsLint(options) {
}


JsLint.prototype.applyCodeReviewRules = function (params, callback) {
    getJSHintCodeReview(callback, params);
}

function getJSHintCodeReview(callback, params) {
    try {
        var categoryParams = {};
        categoryParams.category = 'Javascript';
        categoryParams.subcategory = 'JSLint';
        var projectRules = [];
        
        //Commented below code since not yet clear about rule configuration with new desing.
        _allModule.CodeReview.getProjectRulesByCategory(params, categoryParams, function (res) {
            if (res.statusCode) {
                callback({ statusCode: 100 , errorMessage: res.errorMessage });
            }
            else {
                projectRules = res.data;
                applyProjectRules(params, projectRules, callback);
            }
        });
        
    } catch (err) {
        console.log('-----------------------------------------');
        console.log('@@ INSIDE CATCH getJSHintCodeReview---==>  ' + err);
        callback({ statusCode: 500, errorMessage: err });
    }
}

function applyProjectRules(params, projectRules, callback) {
    try {
        var isFileCritical = false;
        var jshint = require('jshint').JSHINT;
        //var jshintConfig = require('./jsHintConfig.js');
        var jshintConfigFileData = fs.readFileSync('./jsHintConfig.js', 'utf8');
        
        var data = params.downloadContent.metaData;//jshintConfigFileData.concat(params);
        
        //Return response object
        var codeReviewCommentsResponse = {};

        var arrCodeReviewComments = [];
        if (jshint(data.toString())) {
            console.log('File has no errors.  Congrats!');
        } else {
            console.log('Errors in file, Error Count ::==> ', jshint.errors.length);
            
            var arrErrorMessages = jshint.errors;
            
            arrErrorMessages.forEach(function (errorMessage) {
                if (errorMessage != null) {
                    //console.log("************************errorMessage**************************************" + JSON.stringify(errorMessage.code));
                    
                    //Commented below code since not yet clear about rule configuration with new desing.
                    var configuredRule = arrayQuery('checkID').is(errorMessage.code).on(projectRules).pop();
                    if (typeof (configuredRule) === 'undefined' || configuredRule === null) {
                        return;
                    }
                                        
                    //Check if this rule is critical
                    if (configuredRule.isCriticle) {
                        isFileCritical = true;
                    }

                    var commentRes = {};
                    _allModule.CodeReview.getCodeBlockFromFileData(data, errorMessage.line, function (res) {
                        if (res.statusCode) {
                            console.log('@@ Error inside JsLint.getLineByFileData ::==>' + res.errorMessage);
                        }
                        else {
                            console.log('-----------------------------------------');
                            console.log('**==> Lines returns inside JsLint.getLineByFileData ::==>');
                            commentRes.codeBlock = res.codeBlock;
                        }
                        
                        commentRes.codeLineNo = errorMessage.line;
                        commentRes.checkID = errorMessage.code;
                        commentRes.comment = errorMessage.reason;
                        commentRes.score = parseInt(configuredRule.score);                       
                        commentRes.fileType = configuredRule.fileType;
                        commentRes.lintType = configuredRule.lintType;
                        commentRes.ruleType = configuredRule.ruleType;
                        commentRes.type = 'singleline';
                        arrCodeReviewComments.push(commentRes);
                    });
                }
            });
            codeReviewCommentsResponse.isFileCritical = isFileCritical;
            codeReviewCommentsResponse.codeReviewComments = arrCodeReviewComments;
        }
        console.log('-----------Returning with codereview comments -----Count ::=>>> ---------', arrCodeReviewComments.length);
        callback({ statusCode: 0, data: codeReviewCommentsResponse });
    }
    catch (err) {
        console.log('@@ INSIDE CATCH JsLint.applyProjectRules ::==> err ::=>> ' + err);
        callback({ statusCode: 500, errorMessage: err });
    }
}



module.exports.nodeJsLint = nodeJsLint;

