"use strict";

/**
 * @Easy and simple way of communication between VisualStudio with nodeJS
 * @author Aloha
 */

/**
 *  require modules needed
 */
var request = require("request");
var fs = require('fs');
var csslint = require('csslint').CSSLint;
var arrayQuery = require('array-query');

/**
 * Create VisualStudio instance
 * @param {type} token
 * @returns {VisualStudio}
 */

function nodeCssLint(options) {
    return new CssLint();
}

function CssLint(options) {
}


CssLint.prototype.applyCodeReviewRules = function (params, callback) {
    getCssLintCodeReview(callback, params);
}

function getCssLintCodeReview(callback, params) {
    try {
        var categoryParams = {};
        categoryParams.category = 'Css';
        categoryParams.subcategory = 'CssLint';
        
        _allModule.CodeReview.getProjectRulesByCategory(params, categoryParams, function (res) {
            if (res.statusCode) {
                callback({ statusCode: 100 });
            }
            else {
                var projectRules = res.data;
                applyProjectRules(params, projectRules, callback);
            }
        });
    } catch (err) {
        console.log('-----------------------------------------');
        console.log('@@ INSIDE CATCH getCssLintCodeReview ::===>  ' + err);
        callback({ statusCode: 500, errorMessage: err });
    }
}

function applyProjectRules(params, projectRules, callback) {
    try {
        var isFileCritical = false;
        
        var data = params.downloadContent.metaData;
        var codeReviewCommentsResponse = {};
        var arrCodeReviewComments = [];
        
        var ruleset = csslint.getRuleset();
        var report = csslint.verify(params.downloadContent.metaData, ruleset);
        
        if (report != null || report != undefined) {
            console.log("!!!!!!!!!@@@@@@@@@@@@@@@@@@@==============>");
            report.messages.forEach(function (errorMessage, index) {
                
                var configuredRule = arrayQuery('checkID').is(errorMessage.rule.id).on(projectRules).pop();
                if (typeof (configuredRule) === 'undefined' || configuredRule === null) {
                    return;
                }
                
                //Check if this rule is critical
                if (configuredRule.isCriticle) {
                    isFileCritical = true;
                }
                
                var commentRes = {};
                _allModule.CodeReview.getCodeBlockFromFileData(data, errorMessage.line, function (res) {
                    if (res.statusCode) {
                        console.log('@@ Error inside CssLint.getLineByFileData ::==>' + res.errorMessage);
                    }
                    else {
                        console.log('-----------------------------------------');
                        console.log('**==> Lines returns inside CssLint.getLineByFileData ::==>');
                        commentRes.codeBlock = res.codeBlock;
                    }
                    
                    /*commentRes.codeLineNo = errorMessage.line;
                    commentRes.checkID = errorMessage.rule.id;
                    commentRes.comment = errorMessage.message;
                    commentRes.category = 'CssLint';
                    commentRes.type = 'SingleLine';*/
                    commentRes.codeLineNo = errorMessage.line;
                    commentRes.checkID = errorMessage.rule.id;
                    commentRes.comment = errorMessage.message;
                    commentRes.fileType = configuredRule.fileType;
                    commentRes.lintType = configuredRule.lintType;
                    commentRes.ruleType = configuredRule.ruleType;
                    commentRes.score = parseInt(configuredRule.score);
                    commentRes.type = 'singleline';
                    arrCodeReviewComments.push(commentRes);
                });
            });
            codeReviewCommentsResponse.isFileCritical = isFileCritical;
            codeReviewCommentsResponse.codeReviewComments = arrCodeReviewComments;
        }
        callback({ statusCode: 0, data: codeReviewCommentsResponse });
        console.log('-----------------------------------------');
    }
    catch (err) {
        console.log('-----------------------------------------');
        console.log('@@ INSIDE CATCH CssLint.applyProjectRules ::===>  ' + err);
        callback({ statusCode: 500, errorMessage: err });
    }
}

module.exports.nodeCssLint = nodeCssLint;

