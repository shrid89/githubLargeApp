"use strict";

/**
 *  require modules needed
 */
var request = require("request");
//var obj = require('all_modules');

function nodeIntegrations() {
    return new Integrations();
}

function Integrations() {

}

Integrations.prototype.getOrganizationProjects = function (gConfig, params, callback) {
    try {
        console.log("*********** START : Integrations.prototype.getOrganizationProjects ********************");
        orgnizationProjects(gConfig, params, callback);
    }
    catch (err) {
        callback({ statusCode: 100, statusMessage: JSON.stringify(err) });
    }
}

Integrations.prototype.getProjectByID = function (gConfig, params, callback) {
    try {
        console.log("*********** START : Integrations.prototype.getAllProjects ********************");
        params.isAllProject = false;
        params.isByProjectId = true;
        orgnizationProjects(gConfig, params, callback);
    }
    catch (err) {
        callback({ statusCode: 100, statusMessage: JSON.stringify(err) });
    }
}

Integrations.prototype.getAllProjects = function (gConfig, callback) {
    try {
        console.log("*********** START : Integrations.prototype.getAllProjects ********************");
        var params = {}
        params.isAllProject = true;
        orgnizationProjects(gConfig, params, callback);
    }
    catch (err) {
        callback({ statusCode: 100, statusMessage: JSON.stringify(err) });
    }
}



function orgnizationProjects(conf, params, projectsCallback) {
    try {
        console.log("*********** START : orgnizationProjects ********************");
        var condition = '';
        if (!params.isAllProject && params.isByProjectId) {
            condition = { _id: params.projectID };
        }
        else if (!params.isAllProject) {
            condition = { organizationID: params.organizationID };
        }
        conf.Projects.find(condition).populate('userIntegrationID').populate('integrationID').exec(sendOrgnizationProjectsResponse.bind(null, conf,params, projectsCallback));
    } catch (err) {
        console.log('ERROR :: orgnizationProjects ===============>' + err);
        //console.log(err);
        getUserIntCallback({ statusCode: 100, "errorMessage": err });
        return;
    }
}

function sendOrgnizationProjectsResponse(conf, params,projectsCallback, err, resOrganizationProjects) {
    try {
        console.log("*********** START : sendOrgnizationProjectsResponse ********************")

        var objResponse = {};
        objResponse.statusCode = 0;
        if (err) {
            console.log("*********** ERROR : sendOrgnizationProjectsResponse ********************" + JSON.stringify(err));
            projectsCallback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": err });
            return;
        }
        console.log("*********** SUCCESS : sendOrgnizationProjectsResponse ********************");
        var arrOrganizationProjects = [];
        var index = 0;
        conf.async.each(resOrganizationProjects, function (organizationProject, eachCallback) {
            var objOrgProject = {};
            console.log("*********** inside : conf.async.each(resOrganizationProjects ********************" + JSON.stringify(organizationProject));
            if (organizationProject.userIntegrationID === null || organizationProject.userIntegrationID === undefined) {
                eachCallback();
            }

            objOrgProject.projectId = organizationProject._id;
            objOrgProject.projectName = organizationProject.projectName;
            objOrgProject.description = organizationProject.description;
            objOrgProject.url = organizationProject.URL;
            objOrgProject.organizationID = organizationProject.organizationID;
            objOrgProject.isProcessed = organizationProject.isProcessed;
            //Fill respective user integration id...
            objOrgProject.userIntegrationID = organizationProject.userIntegrationID;
            objOrgProject.integrationID = organizationProject.userIntegrationID.integrationID;

            if (params.isByProjectId) {
                console.log("*********** RETURNING  : sendProjectByIdResponse ********************");
                objResponse.project = objOrgProject;
                projectsCallback(objResponse);
                return;
            }
            else {
                arrOrganizationProjects.push(objOrgProject);
            }

            eachCallback();

        }, function () {
            console.log("*********** RETURNING : sendOrgnizationProjectsResponse ********************");
            objResponse.projectList = [];
            objResponse.projectList = arrOrganizationProjects;
            projectsCallback(objResponse);
        });
    } catch (err) {
        console.log('CATCH : sendOrgnizationProjectsResponse' + err);
        projectsCallback({ statusCode: 100, "errorMessage": err });
        return;
    }
}

module.exports.nodeIntegrations = nodeIntegrations;

