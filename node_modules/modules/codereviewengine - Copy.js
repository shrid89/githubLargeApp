"use strict";

/**
 *  require modules needed
 */
var request = require("request");
var path = require('path');
var io;

function nodeCodeReviewEngine() {
    return new CodeReviewEngine();
}

function CodeReviewEngine() {

}

CodeReviewEngine.prototype.startCodeReviewEngine = function (params, gConfig, pullPushCommand, res, callback) {
    try {
        console.log('==> START :: ==> CodeReview.prototype.startCodeReviewEngine *****************************');
        //Call to get all changesets of requested project.
        getProjectChangesets(params, gConfig, pullPushCommand, res, function (result) {
            if (result.statusCode) {
                callback({ statusCode: 100, statusMessage: result.Status });
            } else {
                console.log('==> Completed Step I-- Get ProjectChangesets :: CodeReview.prototype.startCodeReviewEngine *****************************');
                if (result.status.data.value != null && result.status.data.value.length > 0) {

                    var projectChangeSetsParam = {};
                    projectChangeSetsParam = params;
                    projectChangeSetsParam.changeSets = result.status.data.value;
                    projectChangeSetsParam.organizationID = params.organizationID;

                    //Call to get each changeset changes.
                    getChangeSetChanges(projectChangeSetsParam, gConfig, pullPushCommand, res, function (result) {
                        if (result.statusCode) {
                            callback({ statusCode: 100, statusMessage: result.Status });
                        } else {
                            console.log('==> Completed Step I|-- Get ChangeSetChanges :: CodeReview.prototype.startCodeReviewEngine *****************************');
                            if (result.status.data.value != null && result.status.data.value.length > 0) {

                                var changeSetChangesParam = {};
                                changeSetChangesParam = params;
                                changeSetChangesParam.changeSetChange = result.status.data.value;
                                changeSetChangesParam.organizationID = params.organizationID;

                                getChangeSetItems(changeSetChangesParam, gConfig, pullPushCommand, res, function (result) {
                                    if (result.statusCode) {
                                        callback({ statusCode: 100, statusMessage: result.Status });
                                    } else {
                                        console.log('==> Completed Step III-- Get ChangeSetItems :: CodeReview.prototype.startCodeReviewEngine *****************************');

                                    }
                                });
                            }
                        }
                    });
                }
            }
        });
    }
    catch (err) {
        console.log('==> ERROR :: ==> CodeReview.prototype.startCodeReviewEngine ***************************** ERROR==> ' + err);
        callback({ statusCode: 100, statusMessage: JSON.stringify(err) });
    }
}

//Get Project ChangeSets
function getProjectChangesets(params, gConfig, pullPushCommand, res, callback) {
    try {
        console.log('==> START :: ==> CodeReview.prototype.getProjectChangesets *****************************');

        params.messageText = '/visualstudio get changesets by path /' + params.orgProject.projectName;
        doCodeReviewProcess(params, gConfig, pullPushCommand, res, function (result) {
            if (result.statusCode) {
                res.send(JSON.stringify({ statusCode: 100, statusMessage: result.Status }));
            } else {
                callback(result);
            }
        });
    }
    catch (err) {
        console.log('getProjectChangesets ==========>', err);
        callback({ statusCode: 100 });
    }
}

//To get each changeset changes.
function getChangeSetChanges(projectChangeSetsParam, gConfig, pullPushCommand, res, callback) {
    console.log('==> START :: ==> CodeReview.prototype.getChangeSetChanges *****************************');
    projectChangeSetsParam.changeSets.forEach(function (changeSet, index) {
        //  if (changeSet.changesetId === 18) {
        console.log('==> INSIDE :: ==> FOR EACH LOOP CodeReview.prototype.getChangeSetChanges *****************************' + changeSet.changesetId);

        var changeSetParam = {};
        changeSetParam.changesetId = changeSet.changesetId;
        changeSetParam.author = changeSet.author.displayName;
        changeSetParam.changeSetLog = changeSet.comment;
        changeSetParam.messageText = "/visualstudio get changeset " + changeSet.changesetId + " List";

        doCodeReviewProcess(changeSetParam, gConfig, pullPushCommand, res, function (result) {
            if (result.statusCode) {
                res.send(JSON.stringify({ statusCode: 100, statusMessage: result.Status }));
            } else {
                callback(result);
            }
        });
        //}
    });
}

//To get file containt from changeset item
function getChangeSetItems(changeSetChangesParam, gConfig, pullPushCommand, res, callback) {

    changeSetChangesParam.changeSetChange.forEach(function (changeSetChangeItem, index) {
        // if (changeSetId === 18) {
        console.log("*&^*&^*&^*&^*&^===================>ChangeSetId::=>" + changeSetChangeItem.item.version + "---" + path.extname(changeSetChangeItem.item.path));
        var pathExtention = path.extname(changeSetChangeItem.item.path);
        if (pathExtention !== '.js' && pathExtention !== '.cs') {
            console.log("Return from changeSetChange.forEach ===================>");
            return;
        }

        var changeSetChangeItemParam = {};
        changeSetChangeItemParam.changesetId = changeSetChangeItem.item.version;;
        changeSetChangeItemParam.filePath = changeSetChangeItem.item.path;
        changeSetChangeItemParam.messageText = "/visualstudio get filecontent by URL " + changeSetChangeItem.item.url;

        doCodeReviewProcess(changeSetChangeItemParam, gConfig, pullPushCommand, res, function (result) {
            if (result.statusCode) {
                res.send(JSON.stringify({ statusCode: 100, statusMessage: result.Status }));
            } else {
                callback(result);
            }
        });
        //}
    });
}

function doCodeReviewProcess(params, gConfig, pullPushCommand, res, callback) {
    try {
        emitCommandData(params, gConfig, pullPushCommand, res, function (result) {
            if (result.statusCode) {
                res.send(JSON.stringify({ statusCode: 100, statusMessage: result.statusMessage }));
            } else {
                callback(result);
            }
        });
    }
    catch (err) {
        console.log('doCodeReviewProcess==========>', err);
        callback({ statusCode: 100 });
    }
}

//Emit command data to user or group member
function emitCommandData(params, gConfig, pullPushCommand, res, callback) {
    try {
        var spitDataArray = params.messageText.split(' ');
        var DataArray = spitDataArray;
        var integrationName = spitDataArray[0];
        integrationName = integrationName.replace('/', '');
        //var params = {};
        params.data = {
            UserID: params.senderUserID,
            OrganizationID: params.organizationID,
            IntegrationName: integrationName,
            DataArray: DataArray,
            TargetID: params.targetID,
            CommmandID: params.commmandID,
            TargetType: params.targetType,
            organizationProject: params.orgProject
        };
        runCommand(gConfig, pullPushCommand, params, function (result) {
            params.parseHtml = 1;
            if (result.statusCode) {
                res.send(JSON.stringify({ statusCode: 100, statusMessage: result.statusMessage }));
            } else {
                callback(result);
            }
        });
    } catch (err) {
        console.log(" EEEEEEE RRRRRRRRRRR");
        console.log(err.stack);
        res.send(JSON.stringify({ statusCode: 100 }));
    }
}

//To run the pull push command
function runCommand(gConfig, pullPushCommand, params, callback) {
    console.log("WE ARE IN RUN COMAND");
    try {
        params.data.DataArray = CreateCommandArray(params.data.DataArray);
        var command = params.data.DataArray[0];
        if (typeof (params.data.DataArray[1]) != 'undefined' && params.data.DataArray[1] != '') {
            command += ' ' + params.data.DataArray[1];
        }
        var ActualCommand = command;
        if ((params.data.IntegrationName == "appear" || params.data.IntegrationName == "gotomeeting" || params.data.IntegrationName == "giphy") && (params.data.DataArray[1] != 'help')) {
            command = params.data.DataArray[0];
        }
        var ThreeLetterCommandArr = ["recurly", "insight", "smartsheet", "force", "visualstudio", "paper", "scoutapp", "site24", "samanage", "jive", "chargebee", "robot", "chargify", "clearbit", "relateiq", "lighthouse", "jixee", "highrise", "agile", "groove", "postmark", "scout", "digitalocean", "site", "teamsupport", "freshservice", "tender", "onelogin", "dns", "mandrill", "optimize", "done", "reamaze", "cloud", "woopra", "scoutapp", "airbrake", "victor", "preact", "plivo", "satisfaction", "base", "city", "timecamp", "testlodge", "swift", "postmark", "keen", "iron", "firbase", "dploy", "customerio", "okta", "gitlab", "sprintly", "gemini", "testrail", "victor", "airbrake", "base", "loader", "runscope", "feedbin", "go", "copper", "snappy", "stripe", "fresh", "boundary", "bugsnag", "com", "bee", "enchant", "tracker", "ping", "bean", 'kite', 'circle', 'ship', 'librato', 'sema', 'page', 'dog', 'scout', 'magnum', 'duty', 'relic', 'fresh', 'voice', 'copper', 'spm', 'density', 'desk', 'snappy', 'sentry', 'runscope', 'hub', 'jira', 'ping', 'codejenie'];

        if (ThreeLetterCommandArr.indexOf(params.data.IntegrationName) > -1 && params.data.DataArray[1] != 'help') {
            command += ' ' + params.data.DataArray[2];
        }

        gConfig.getIntegrationApisDataFromRedis(params.data.CommmandID, command, function (IntegrationApisData) {
            console.log("******** getIntegrationApisDataFromRedis *************");
            //console.log(IntegrationApisData);
            if (IntegrationApisData != null) {
                console.log("******** IntegrationApisData !=null getIntegrationApisDataFromRedis *************");
                var FunctionName = IntegrationApisData.functionName;
                console.log(FunctionName);
                if (params.data.DataArray[1] == 'help') {
                    functionName = 'GetHelp';
                }
                pullPushCommand[FunctionName](IntegrationApisData, io, gConfig, params, CommandCallBack.bind(null, ActualCommand, IntegrationApisData, io, gConfig, params, callback));
            } else {
                callback({ statusCode: 100, Status: ActualCommand + ' ' + 100 });
            }
        });
    } catch (err) {
        console.log('RunCommand==========>', err);
        callback({ statusCode: 100, Status: ActualCommand + ' ' + ' ' });
    }
}

function CommandCallBack(ActualCommand, IntegrationApisData, io, gConfig, params, callback, result) {
    try {
        var EmitData = result.status;
        var DataObject = { integrationApisID: IntegrationApisData._id, userIntegrationID: params.data.UserID, success: "success", error: "", lastTime: new Date(), data: result.status, webHook: false };
        var IntegrationApisLogsObj = new gConfig.IntegrationApisLogs(DataObject);
        IntegrationApisLogsObj.save(function (err, IntegrationApisLogsData) {
            console.log('result===============================');
            //AT
            //Result.statusCode = 0;
            result.command = IntegrationApisData.command;
            //
            console.log(result);
            callback(result);
        });
    } catch (err) {
        console.log('commandcallback==========>', err);
        callback({ statusCode: 100, Status: ActualCommand + ' ' + 100 });
    }
}

function CreateCommandArray(CommandArr) {
    //console.log("CreateCommandArray updated @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
    //console.log(CommandArr);
    try {
        var IsMultipleWord = false;
        var CommandArrTemp = [];
        var MultipleWord = '';
        var QuotCounter = -1;
        CommandArr.forEach(function (ArrElement, Index) {
            //Array Element Contains Single or Duble quot append all these words and push all element as single
            if (ArrElement != '' && ArrElement != null) {
                if (ArrElement.indexOf('"') > -1 || ArrElement.indexOf('&#039;') > -1 || ArrElement.indexOf("'") > -1 || IsMultipleWord == true) {
                    MultipleWord += ArrElement + ' ';
                    if (ArrElement.indexOf("'") > -1 || ArrElement.indexOf('"') > -1 || ArrElement.indexOf('&amp;quot;') > -1) {
                        QuotCounter += 1;
                    }
                    //If quot ends push words in array               
                    if (QuotCounter == 1) {
                        IsMultipleWord = false;
                        CommandArrTemp.push(MultipleWord)
                        MultipleWord = "";
                        QuotCounter = -1;
                    } else {
                        IsMultipleWord = true;
                    }
                } else {
                    CommandArrTemp.push(ArrElement);
                }
            }

        });
        //console.log("CommandArrTemp rrrrrrrrrrrrrrrrrrrrrrrrr @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2");
        //console.log(CommandArrTemp);
        return CommandArrTemp;
    } catch (err) {
        console.log("Error In CreateCommandArray Function");
        console.log(err.stack);
    }
}

module.exports.nodeCodeReviewEngine = nodeCodeReviewEngine;

