"use strict";

/**
 *  require modules needed
 */
var request = require("request");
var path = require('path');
var fs = require('fs');

function nodeRedisCluster() {
    return new RedisCluster();
}

function RedisCluster() {

}

RedisCluster.prototype.addMeToRedisQ = function (gConfig, params) {
    try {
        console.log("** START w1 ::==> CJPullPushServer.RedisCluster.prototype.addMeToRedisQ ***************** ");
        params.host = params.host;
        params.port = params.port;
        params.os = params.os;
        params.isActive = true;
        params.isFree = true;
        
        var workerID = params.host.replace('http://', '').replace('https://', '');
        var chunks = workerID.split('.');
        workerID = '';
        chunks.forEach(function (chunk, index) {
            workerID += chunk;
        });
        workerID += params.port;
        _workerID = workerID;//Set value to GLOBAL Variable.

        var applicationLogParams = {};
        applicationLogParams.action = 'startFunction';
        applicationLogParams.functionName = 'addMeToRedisQ';
        applicationLogParams.inputParams = params;
        applicationLogParams.status = 'success';
        _allModule.ApplicationLogger.addLog(applicationLogParams);

        console.log('My Worker ID Is ::===> ' + _workerID);
        
        gConfig.redisClient.hAdd(_workStationListQuery, _workerID, params, function (res) {
            if (!res.statusCode) {
                console.log('Worker Added In Redis Successfully.... WorkerID Is :: =>>> ' + workerID);
            }
        });
        
        applicationLogParams.action = 'endFunction';
        applicationLogParams.functionName = 'addMeToRedisQ';
        applicationLogParams.inputParams = params;
        applicationLogParams.status = 'success';
        _allModule.ApplicationLogger.addLog(applicationLogParams);
         
    }
    catch (err) {
        applicationLogParams.status = 'fail';
        applicationLogParams.response = err;
        applicationLogParams.logMessage = err.stack;
        _allModule.ApplicationLogger.addLog(applicationLogParams);
        console.log("@@ ERROR INSIDE CATCH ::==>  CJPullPushServer.RedisCluster.prototype.addMeToRedisQ " + err);
    }
}

RedisCluster.prototype.setMeFree = function (flag, fileUniqueID, callback) {
    try {
        console.log("** START w1 ::==> CJPullPushServer.RedisCluster.prototype.setMeBusy *********** ");
        
        _gConfig.redisClient.hGet(_workStationListQuery, _workerID, function (res) {
            if (res.statusCode) {
                callback({ statusCode: res.statusCode, errorMessage: 'Error while get value from redis for worker list' });
            }
            else {
                console.log('Inside RedisCluster.prototype.setMeFree ::=>  ' + flag + ' Get WorkerID  :: =>>> ' + _workerID);
                var workStation = JSON.parse(res.data);
                workStation.isFree = flag;
                workStation.workStartTime = flag ?null:new Date();
                workStation.fileUniqueID = fileUniqueID;
                _gConfig.redisClient.hmSet(_workStationListQuery, _workerID, workStation, function (res) {
                    if (res.statusCode) {
                        callback({ statusCode: res.statusCode, errorMessage: 'Error while update value in redis for worker list' });
                    }
                    else {
                        console.log('Inside RedisCluster.prototype.setMeFree :: ==>  ' + flag + ' Update workder for  WorkerID  :: =>>> ' + _workerID);
                        callback({ statusCode: 0 });
                    }
                });
            }
        });
    }
    catch (err) {
        console.log("@@ ERROR INSIDE CATCH ::==>  CJPullPushServer.RedisCluster.prototype.setMeBusy " + err);
        callback({ statusCode: 500, statusMessage: JSON.stringify(err) });
    }
}

RedisCluster.prototype.removeFileFromDisk = function (params, callback) {
    try {
        console.log("** START w1 ::==> CJPullPushServer.RedisCluster.prototype.removeFileFromDisk *********** ");
        fs.unlink(params.downloadContent.physicalFilePath, function (err) {
            if (err) {
                callback({ statusCode: 500, errorMessage: err });
            }
            else {
                callback({ statusCode: 0 });
            }
        });
    }
    catch (err) {
        console.log("@@ ERROR INSIDE CATCH ::==>  CJPullPushServer.RedisCluster.prototype.removeFileFromDisk " + err);
        callback({ statusCode: 500, errorMessage: JSON.stringify(err) });
    }
}


RedisCluster.prototype.subscribeMasterChannel = function (gConfig, obj) {
    try {
        console.log("** START w1 ::==> CJPullPushServer.RedisCluster.prototype.subscribeMasterChannel ***************** ");
        
        obj.SocketModule.subscribe();
    }
    catch (err) {
        console.log("@@ ERROR INSIDE CATCH ::==>  CJPullPushServer.RedisCluster.prototype.subscribeMasterChannel " + err);
        //callback({ statusCode: 100, statusMessage: JSON.stringify(err) });
    }
}

module.exports.nodeRedisCluster = nodeRedisCluster;

