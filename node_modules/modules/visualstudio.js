"use strict";

/**
 * @Easy and simple way of communication between VisualStudio with nodeJS
 * @author Aloha
 */

/**
 *  require modules needed
 */
var request = require("request");
var async = require("async");

/**
 * Create VisualStudio instance
 * @param {type} token
 * @returns {VisualStudio}
 */

function nodeVisualStudio() {
    return new VisualStudio();
}

function VisualStudio() {
   
}

function buildAuthUrl() {
    
}



/*
 Dev credentials*/
var clientSecret = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Im9PdmN6NU1fN3AtSGpJS2xGWHo5M3VfVjBabyJ9.eyJjaWQiOiIzNDJlOTNkZS0wMmI3LTRhMzYtYWQ2Yi04MWI4M2VjYmQ3Y2YiLCJjc2kiOiJmZDMwNmJhMS05NTExLTQ4OTItOTRkYS00MzEzMmVhZmM3YWUiLCJuYW1laWQiOiI4NWYzYmI1My0xNzU1LTQ2MzEtYjVhNi1lZDdmY2ZmZGIzMTkiLCJpc3MiOiJhcHAudnNzcHMudmlzdWFsc3R1ZGlvLmNvbSIsImF1ZCI6ImFwcC52c3Nwcy52aXN1YWxzdHVkaW8uY29tIiwibmJmIjoxNDQ2NzI1OTIxLCJleHAiOjE2MDQ0MDU5MjF9.TzjVUg4WYfRZrXD965c2KbMO5qxpu9iI86clq4ILhrdi5TMVXZV5R7JJ6N0Z7zuMK1WwBtw-RB88xFrfNyVbBIiT8zh3MVHTU9W6vio7RSOx4ux8H1yNHPaTl-ZAm2JdA-pxgzoooosElntX90uJ1F5XY5mX2T7L3W7Y4y9i2oo7Kj7efvBE___o0WCOZhWvEzBveCfZ7LzMz6xU1SGHjZognfznKvb-BvjNfVV4LYNPm0eG4th62xlZnJCB-jvJPV4Sv-etqcbLnM5iCXvBHs40fI6RNBk0C3fnaZorW9JfLVxR7BWM-iLV0KQWJ8SOztSrWuHws4fkKhYnq8p7QQ';
var clientID = '342E93DE-02B7-4A36-AD6B-81B83ECBD7CF';

//Live Credentials
//var clientSecret = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Im9PdmN6NU1fN3AtSGpJS2xGWHo5M3VfVjBabyJ9.eyJjaWQiOiI3MDZmNzJhZi04NDNlLTQ0OGUtYjg5Yi0zMzE0ZGFmODUxZDUiLCJjc2kiOiI4ZDU5OWFhMC01ZWQ1LTQ0OGMtOTdmZi1kMDYyMzI5NGIyNTQiLCJuYW1laWQiOiIwODM3ZTg1Zi1kNWQ2LTQyYmEtODRlYi02NTI3ZWIyYTkyOWMiLCJpc3MiOiJhcHAudnNzcHMudmlzdWFsc3R1ZGlvLmNvbSIsImF1ZCI6ImFwcC52c3Nwcy52aXN1YWxzdHVkaW8uY29tIiwibmJmIjoxNDQ0MjMxNjQ2LCJleHAiOjE2MDE5MTE2NDZ9.H9ZyAOGcWfqOSpcIWtCQlOmPd0x3uPGBfTid9JJ7yXqVn4MfEyNUWhFDhue7mAfybB1SZhzY6eXqcJd7R9xrvDvvdobX7SpXkXORSfjc8DmVOmjBf8_Eco0jAzE9dw1JaoLBlYNJWhzRv5hnLBOwOmLm7bXCEBNxBQHzA5RBAXxj_9fxq2NFMlDnKN5GGexgcobP9aiTsFdKIW-K7ThZkHwisGTTHfq_ysqGNZPLTCnOXiTQItBg7NJcfLQ4BYYiTdXff2pJbVgwy-Yrlvkie2GGxEvXJ2FSA0Js3vwnqJZYTOC28aFI85Tq2yiIwitS2GukoHBXGkHxnnMWDxeWhw';
//var clientID = '706F72AF-843E-448E-B89B-3314DAF851D5';

var domain = 'https://mycodejenie.com/';
var oauth2 = require('simple-oauth2')({
    clientID: clientID,
    clientSecret : clientSecret,
    site: 'https://app.vssps.visualstudio.com/oauth2',
    authorizationPath: '/authorize',
    tokenPath: '/token',
    response_type: "Assertion"
});
var redirectUri = domain + 'authVisualstudioCallback';
var authorization_uri = oauth2.authCode.authorizeURL({
    redirect_uri: redirectUri,
    response_type: "Assertion",
    state: "User1",
    scope: "vso.build_execute vso.chat_manage vso.code_manage vso.gallery_acquire vso.gallery_manage vso.packaging_manage vso.release_execute vso.test_write vso.work_write"
});

//var code = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Im9PdmN6NU1fN3AtSGpJS2xGWHo5M3VfVjBabyJ9.eyJuYW1laWQiOiJjNjA5MDBkYi0xMjVlLTQ3ZjEtOTlkMS0yZDE0NjJmNWE5NmMiLCJhY2kiOiJlMWU2OTdkYi04NGZiLTQ1NTYtYmFmZi00NjY1MDE3OGQ5ZDMiLCJzY3AiOiJ2c28uYnVpbGRfZXhlY3V0ZSB2c28uY2hhdF9tYW5hZ2UgdnNvLmNvZGVfbWFuYWdlIHZzby50ZXN0X3dyaXRlIHZzby53b3JrX3dyaXRlIiwiaXNzIjoiYXBwLnZzc3BzLnZpc3VhbHN0dWRpby5jb20iLCJhdWQiOiJhcHAudnNzcHMudmlzdWFsc3R1ZGlvLmNvbSIsIm5iZiI6MTQzOTk3OTg2NCwiZXhwIjoxNDcxNTE1ODY0fQ.VanVo3beVma-NBqPRy3y3NPvPBx5dEt9FbhCcmubDA2YttqKPoSkSrTmz4WPGt6oQPbabmEw4HJhPcDw7zh3IFZpbttVRAeLYeXbjk7ora8I0_CZy949Z1OCKRM-6zN7mr5E-bYigMndOCnNLX9s2RIU4piXyoKEroLdlBhkxSOI-qWcXcgyERF1Vi1Qy2T7EtNRF3tlJj5ZT6CPlXikQx009ylIxBkMkNFb0GeMP3qdah95lMZjlEvi8xlWvX52Jm7vBpoiiwOU6Y5Jt9ytP64DAzXKVt5E8HsGq4Rwg2lKg1Fy7k2k6eqozMzPeRhgj1C6aS4Jvh9DgUbsMFBlzw"



function getVisualStudioAccessToken(gConfig, params, callback) {
    console.log("ssssssssssssssssssssssssssssssssssssss");
    console.log(params);
    oauth2.authCode.getToken({
        assertion: params.refreshToken ,
        client_assertion_type : "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
        client_assertion: clientSecret, 
        grant_type: "refresh_token",
        redirect_uri: redirectUri
    }, saveToken.bind(null, gConfig, params, callback));

}

function saveToken(gConfig, params, callback, error, result) {
    try {
        console.log("error ######################################### ");
        console.log(error);
        console.log("result ######################################### ");
        console.log(result);
        if (error) {
            callback({ statesCode: 100, accessToken: error });
            console.log('Access Token Error', error);
        } else {
            console.log("################################################333 ");
            console.log("################################################333 ");
            console.log(result);
            var authenticationDataObj = {};
            authenticationDataObj = params.authenticationData
            authenticationDataObj.accessToken = result.access_token;
            authenticationDataObj.refreshToken = result.refresh_token;
            console.log("authenticationDataObj IS");
            console.log(authenticationDataObj);
            
            gConfig.UserIntegrations.findOne({ _id: params.userIntegrationID }).exec(function (err, integrationRes) {
                if (err) {
                    console.log("@@err in U ", err);
                }
                else {
                    console.log("**Success::=>UserIntegrationData");
                    
                    
                    if (integrationRes != null) {
                        var date = new Date().toUTCString();
                        if (!integrationRes) {
                            integrationRes = new conf.gc.UserIntegrations();
                            integrationRes.createdOn = date;
                            integrationRes._id = params.userIntegrationID;
                        }
                        integrationRes.userID = params.ResponseData.userID;
                        integrationRes.organizationID = params.ResponseData.organizationID;
                        integrationRes.integrationID = params.ResponseData.integrationID;
                        integrationRes.authenticationData = authenticationDataObj;
                        integrationRes.channels = params.ResponseData.channels;
                        integrationRes.authenticationStatus = 1;
                        integrationRes.authenticationDate = date;
                        integrationRes.lastAuthenticationError = '';
                        integrationRes.isEnabled = "";
                        integrationRes.updatedOn = date;
                        integrationRes.save(function (err, integrationResp) {
                            console.log(err);
                            console.log("integrationResp !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1", integrationResp);
                            gConfig.updateUserIntegrationData(params.ResponseData.organizationID, integrationResp._id, integrationResp);
                            if (err != null) {
                                callback({ statesCode: 101, accessToken: result.access_token, refreshToken: result.refresh_token });
                            } else {
                                callback({ statesCode: 0, accessToken: result.access_token, refreshToken: result.refresh_token });
                            }
                        });
                    }
                       
                }
            });
          
        }
    } catch (err) {
        console.log("Error in saveToken WWWWWWWWWWWWWWWWWWWWWWWWWWWWWw", err);
    }
}

VisualStudio.prototype.getVisualStudioAllFileItems = function (conf, params, callback) {
    console.log("getVisualStudioTeamRooms api");
    var requestObj = {
        url: "https://" + params.accountName + ".visualstudio.com/DefaultCollection/_apis/tfvc/items/?scopePath=$/" + params.filePath + "&recursionLevel=Full&api-version=1.0-preview.1",
        headers: {
            "Authorization": "Bearer " + params.accessToken,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    }
    params.methodName = "get";
    //sendGetRequest(conf,callback,"/_apis/chat/rooms?api-version=1.0",params);
    sendGetRequest(conf, callback, requestObj, params);
}

VisualStudio.prototype.getVisualStudioChangesetWithField = function (conf, params, callback) {
    //sendGetRequest(callback, "/_apis/tfvc/changesets/" + params.changesetId + "?" + params.withFieldData + "&api-version=1.0", params);
    
    console.log("getVisualStudioTeamRooms api");
    var requestObj = {
        url: "https://" + params.accountName + ".visualstudio.com/DefaultCollection/_apis/tfvc/changesets/" + params.changesetId + "?" + params.withFieldData + "&api-version=1.0-preview.1",
        headers: {
            "Authorization": "Bearer " + params.accessToken,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    }
    params.methodName = "get";
    //sendGetRequest(conf,callback,"/_apis/chat/rooms?api-version=1.0",params);
    sendGetRequest(conf, callback, requestObj, params);
}

VisualStudio.prototype.getVisualStudioFileContentByURL = function (conf, params, callback) {
    console.log("getVisualStudioTeamRooms api");
    var requestObj = {
        url: params.url,
        headers: {
            "Authorization": "Bearer " + params.accessToken,
            "Content-disposition": "attachment;filename=f1.js",
        }
    }
    params.methodName = "get";
    sendGetRequest(conf, callback, requestObj, params);
}

function sendGetRequest(conf, callback, requestObj, params) {
    try {
        console.log("requestObj IN GET SEND FUNCTION")
        console.log(requestObj);
        console.log("params.methodName");
        console.log(params.methodName);
        request[params.methodName](requestObj, processResponse.bind(null, function (data1) {
            console.log("RERERER #@#@#@");
            //console.log(data1);
            //console.log(data1.data.value);
            if (data1.statusCode != 0 && data1.statusCode != 404 && data1.statusCode != 409 && data1.statusCode != 400 && data1.statusCode != 412) {
                console.log("getVisualStudioAccessToken");
                getVisualStudioAccessToken(conf, params, function (data) {
                    console.log("data ASDFASFDSF");
                    console.log(data);
                    if (data.statesCode == 0) {
                        console.log('-----------------------------Data after return back---------------------------------', data);
                        params.accessToken = data.accessToken;
                        requestObj.headers.Authorization = "Bearer " + data.accessToken;
                        data1.accessToken = data.accessToken;
                        params.isTokenRefreshed = true;
                        sendGetRequest(conf, callback, requestObj, params);
                    } else {
                        console.log("data1.statesCode ", data1.statusCode);
                        if (data1.statusCode == 403 || data1.statusCode == 401) {
                            callback({ statusCode: 101, errorMessage: data1.errorMessage.message });
                        } else {
                            callback({ statusCode: 101, errorMessage: "Unable to refresh your access token." });
                        }
                    }
                });
            } else {
                console.log("statusCode IN");
                if (typeof (params.isTokenRefreshed) != 'undefined' && params.isTokenRefreshed) {
                    data1.isTokenRefreshed = true;
                    data1.accessToken = params.accessToken;
                }
                console.log("data1 QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ");
                //console.log(data1);
                callback(data1);
            }
        }));
    } catch (err) {
        console.log("Error in sendGetRequest", err.stack);
    }
}

function processResponse(callback, error, response, responseData) {
   // console.log("INSIDE ProcessResponse :===>",response);
    //console.log(responseData);
    if (typeof (response) != 'undefined' && typeof (response.statusCode) != 'undefined' && !error && (response.statusCode == 200 || response.statusCode == 201 || response.statusCode == 204)) {
        if (typeof responseData != 'object') {
            //responseData = JSON.parse(responseData);
            
        }
        callback({ statusCode: 0, data: responseData });
        return;
    } else {
        console.log("in else ");
        var Code = 100;
        if (response && typeof(response)!='undefined' && response.statusCode == 401 || response.statusCode == 403 || response.statusCode == 404 || response.statusCode == 409 || response.statusCode == 400 || response.statusCode == 412) {
            Code = response.statusCode;
        }
        callback({ statusCode: Code, errorMessage: responseData });
        return;
    }
}

function sendRequest(callback, path, params) {
    request({
        url: "https://app.vssps.visualstudio.com" + path,
        headers: {
            "Authorization" : "Bearer " + params.accessToken,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    }, processResponse.bind(null, callback));
}

function sendPostRequest(conf, callback, path, params) {
    request.post({
        url: "https://" + params.accountName + ".visualstudio.com/DefaultCollection" + path,
        json: params.postData,
        headers: {
            "Authorization" : "Bearer " + params.accessToken,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    }, processPostResponse.bind(null, callback));
    
}

function sendPutRequest(callback, path, params) {
    request.put({
        url: "https://" + params.accountName + ".visualstudio.com/DefaultCollection" + path,
        json: params.postData,
        headers: {
            "Authorization" : "Bearer " + params.accessToken,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    }, processPostResponse.bind(null, callback));
}

function sendDeleteRequest(callback, path, params) {
    console.log(path)
    console.log(params)
    request.del({
        url: "https://" + params.accountName + ".visualstudio.com/DefaultCollection" + path,
        headers: {
            "Authorization" : "Bearer " + params.accessToken,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    }, processDeleteResponse.bind(null, callback))
}

function processPostResponse(callback, error, response, responseData) {
    console.log("response.statusCode");
    console.log(response.statusCode);
    if (!error && response.statusCode == 200 || response.statusCode == 201 || response.statusCode == 204) {
        if (typeof responseData != 'object') {
            responseData = JSON.parse(responseData);
        }
        callback({ statusCode: 0, data: responseData });
        return;
    } else if (response.statusCode == 203) {
        callback({ statusCode: 203, errorMessage: response.body });
        return;
    } else {
        callback({ statusCode: 100, errorMessage: response.body });
        return;
    }
}

function processDeleteResponse(callback, error, response, responseData) {
    console.log(response.statusCode);
    if (!error && response.statusCode == 204) {
        callback({ statusCode: 0, data: "success" });
        return;
    } else if (response.statusCode == 203) {
        callback({ statusCode: 100, errorMessage: response.statusCode });
        return;
    } else {
        callback({ statusCode: 100, errorMessage: response.body });
        return;
    }
}

module.exports.nodeVisualStudio = nodeVisualStudio;

