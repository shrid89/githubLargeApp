"use strict";

/**
 * @Easy and simple way of communication between codejenie with mybeeps
 * @author Aloha
 */

/**
 *  require modules needed
 */

function nodeMyBeepsIntegration(options) {
    return new MyBeepsIntegration(options);
}

function MyBeepsIntegration(options) {

}

MyBeepsIntegration.prototype.getOrganizationByName = function (conf, params, res, callback) {
    var obj = this;
    var conditon = { subdomain: params.organizationName };
    conf.Organizations.findOne(conditon, obj.getOrganizationByNameCallback.bind(null, obj, conf, params, res, callback));
}

MyBeepsIntegration.prototype.isExistOrganizationAndUser = function (conf, params, res, callback) {
    try {
        var obj = this;
        console.log("*************Org name =====>" + params.organizationName);
        obj.getOrganizationByName(conf, params, res, function (resOrganization) {
            if (resOrganization.statusCode === 0 && resOrganization.status === 1) {
                params.organizationID = resOrganization.organization._id;
                var conditon = { organizationID: params.organizationID, email: params.email };
                conf.Users.findOne(conditon, obj.getOrganizationUserCallback.bind(null, obj, conf, params, res, callback));
            } else {
                callback(resOrganization);
            }
        });
    } catch (err) {
        console.log(err)
        callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": '' });
        return;
    }
}

MyBeepsIntegration.prototype.getOrganizationProjects = function (conf, params, res, callback) {
    var obj = this;
    console.log("Start:===>MyBeepsIntegration.prototype.getOrganizationProjects");
    obj.getOrganizationByName(conf, params, res, function (resOrganization) {
        if (resOrganization.statusCode === 0 && resOrganization.status === 1) {
            params.organizationID = resOrganization.organization._id;
            var conditon = { organizationID: params.organizationID };
            conf.Projects.find(conditon, obj.getOrganizationProjectsCallback.bind(null, conf, params, res, callback));
        }
        else {
            callback(resOrganization);
        }
    });
}

MyBeepsIntegration.prototype.createOrganization = function (conf, params, res, callback) {
    try {
        var obj = this;
        console.log('START :: => MyBeepsIntegration.prototype.createOrganization ');
        params.organizationName = params.organization.subdomain;

        obj.getOrganizationByName(conf, params, res, function (resOrganization) {
            var organization;
            if (resOrganization.statusCode === 0 && resOrganization.status === 0) {
                console.log('subdomain ::=>' + params.organizationName + '+ not exist, creating new organization');
                organization = new conf.Organizations({});
            } else {
                console.log('subdomain ::=>' + params.organizationName + '+ already exist');
                organization = resOrganization.organization;
            }
            organization.name = params.organization.name;
            organization.subdomain = params.organization.subdomain;
            organization.emaildomains = params.organization.emaildomains;
            organization.save(function (err, savedOrganization) {
                if (err) {
                    console.log('ERROR: newOrganization.save' + err);
                    callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": err });
                }
                else {
                    console.log('SUCCESS: newOrganization.save' + savedOrganization._id);
                    params.organizationID = savedOrganization._id;
                    obj.addUsers(conf, params, res, callback);
                }
            });
        });
    }
    catch (err) {
        console.log('INSIDE CATCH : createOrganization' + err)
        callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": '' });
        return;
    }
}

MyBeepsIntegration.prototype.addUsers = function (conf, params, res, callback) {
    try {
        var obj = this;
        console.log('START :: => MyBeepsIntegration.prototype.addUsers ');

        conf.async.each(params.users, function (user, foreachcallback) {
            console.log('inside params.users asyc');
            var condition = { email: user.email };
            conf.People.findOne(condition, function (err, resPeople) {
                if (err || resPeople === null || resPeople === undefined) {
                    resPeople = new conf.People({});
                }
                resPeople.email = user.email;
                resPeople.isActive = true;
                resPeople.save(function (err, savedPeople) {
                    if (err) {
                        foreachcallback();
                    }
                    condition = { organizationID: params.organizationID, email: user.email };
                    conf.Users.findOne(condition, function (err, resUser) {
                        if (err || resUser === null || resUser === undefined) {
                            var resUser = new conf.Users({});
                            resUser.email = user.email;
                            resUser.isActive = user.isActive;
                            resUser.isDelete = user.isDelete;
                            resUser.isLocked = user.isLocked;
                            resUser.isOnline = user.isOnline;
                            resUser.language = user.language;
                            resUser.lastSeen = user.lastSeen;
                            resUser.lastSeenPrivacy = user.lastSeenPrivacy;
                            resUser.name = user.name;
                            resUser.organizationID = params.organizationID;
                            resUser.personID = savedPeople._id;
                            resUser.profileImage = user.profileImage;
                            resUser.profileImagePrivacy = user.profileImagePrivacy;
                            resUser.profileThumb = user.profileThumb;
                            resUser.roleID = user.roleID;
                            resUser.status = user.status;
                            resUser.statusPrivacy = user.statusPrivacy;
                            resUser.userType = user.userType;
                            resUser.save(function (err, savedUser) {
                                if (err) {
                                    console.log('Error=====resUser.save===>' + err);
                                    foreachcallback();
                                }
                                console.log('SUCCESS=====resUser.save===>' + savedUser._id);
                                condition = { email: savedUser.email, organizationID: params.organizationID };
                                conf.Login.findOne(condition, function (err, resLogin) {
                                    if (err || resLogin === null || resLogin === undefined) {
                                        var resLogin = new conf.Login({});
                                        resLogin.userID = savedUser._id;
                                        resLogin.email = savedUser.email;
                                        resLogin.organizationID = savedUser.organizationID;
                                        resLogin.isDelete = false;
                                        resLogin.isFromMyBeeps = true;
                                        resLogin.save(function (err, savedLogin) {
                                            if (err) {
                                                console.log('Error=====resLogin.save===>' + err);
                                            }
                                            else {
                                                console.log('SUCCESS=====resLogin.save===>' + savedLogin._id);
                                            }
                                            foreachcallback();
                                        });
                                    }
                                    else {
                                        foreachcallback();
                                    }
                                });
                            });
                        }
                        else {
                            foreachcallback();
                        }
                    });
                });
            });
        }, function () {
            callback({ statusCode: 0 });
        });
    }
    catch (err) {
        console.log('INSIDE CATCH : createOrganization' + err)
        callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": '' });
        return;
    }
}

MyBeepsIntegration.prototype.updateMyBeepsUserIntergraionID = function (conf, params, res, callback) {
    try {
        var obj = this;
        console.log('START :: => MyBeepsIntegration.prototype.updateMyBeepsUserIntergraionID ');
        var condition = { _id: params.projectID };
        conf.Projects.findOne(condition, obj.updateMyBeepsUserIntergraionIDCallback.bind(null, obj, conf, params, res, callback));
    }
    catch (err) {
        console.log('INSIDE CATCH : updateMyBeepsUserIntergraionID' + err)
        callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": err });
        return;
    }
}

MyBeepsIntegration.prototype.removeMyBeepsUserIntergraionID = function (conf, params, res, callback) {
    try {
        var obj = this;
        console.log('START :: => MyBeepsIntegration.prototype.removeMyBeepsUserIntergraionID ==>' + params.myBeepsUserIntegrationID);
        if (params.myBeepsUserIntegrationID === null || params.myBeepsUserIntegrationID === undefined || params.myBeepsUserIntegrationID === '')
        {
            callback({ statusCode: 100, errorMessage: 'null value for myBeepsUserIntergraionID parameter' });
            return;
        }
        var condition = { myBeepsUserIntegrationID: params.myBeepsUserIntegrationID };
        conf.Projects.find(condition, obj.removeMyBeepsUserIntegrationIDCallback.bind(null, obj, conf, params, res, callback));
    }
    catch (err) {
        console.log('INSIDE CATCH : removeMyBeepsUserIntergraionID' + err)
        callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": err });
        return;
    }
}

/* ################################### Region : Callback Methods #################################*/

MyBeepsIntegration.prototype.getOrganizationByNameCallback = function (obj, conf, params, res, callback, err, resOrganization) {
    try {
        var response = {};
        if (err) {
            console.log("ERROR:======>getgetOrganizationByNameCallback" + err);
            callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": '' });
            return;
        } else {
            console.log("SUCCESS:=======>getgetOrganizationByNameCallback" + JSON.stringify(resOrganization));
            if (resOrganization) {
                response.statusCode = 0;
                response.status = 1;
                response.organization = resOrganization;
            }
            else {
                response.statusCode = 0;
                response.status = 0;
            }
            callback(response);
        }
    } catch (err) {
        console.log(err)
        callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": '' });
        return;
    }
}

MyBeepsIntegration.prototype.getOrganizationProjectsCallback = function (conf, params, res, callback, err, resOrganizationProjects) {
    try {
        var response = {};
        if (err) {
            console.log("ERROR:======>getOrganizationProjectsCallback" + err);
            callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": '' });
            return;
        } else {
            console.log("---@@@OrganizationProjects===>" + JSON.stringify(resOrganizationProjects));
            if (resOrganizationProjects) {
                response.statusCode = 0;
                response.status = 1;
                response.projectList = resOrganizationProjects;
            }
            else {
                response.statusCode = 0;
                response.status = 1;
                response.projectList = [];
            }
            callback(response);
        }
    } catch (err) {
        console.log(err)
        callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": '' });
        return;
    }
}

MyBeepsIntegration.prototype.getOrganizationUserCallback = function (obj, conf, params, res, callback, err, resOrganizationUser) {
    try {
        var currentObj = this;
        var response = {};
        if (err) {
            callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": '' });
            return;
        } else {
            if (resOrganizationUser) {
                console.log("Success=============>getOrganizationUserCallback" + JSON.stringify(resOrganizationUser));
                obj.getOrganizationProjects(conf, params, res, callback);
            }
            else {
                response.statusCode = 0;
                response.status = 0;
                callback(response);
            }
        }
    } catch (err) {
        console.log(err)
        callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": '' });
        return;
    }
}

MyBeepsIntegration.prototype.updateMyBeepsUserIntergraionIDCallback = function (obj, conf, params, res, callback, err, resProject) {
    try {
        var response = {};
        if (err) {
            console.log("ERROR:======>updateMyBeepsUserIntergraionIDCallback" + err);
            callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": err });
            return;
        } else {
            console.log("SUCCESS:=======>updateMyBeepsUserIntergraionIDCallback" + JSON.stringify(resProject));
            if (resProject) {
                resProject.myBeepsUserIntegrationID = params.myBeepsUserIntergraionID;
                resProject.save(function (err, savedProject) {
                    if (err) {
                        console.log("ERROR:======>resProject.save for updating mybeepsuserintegratonID::=>" + params.myBeepsUserIntergraionID + "Erro is::=>" + err);
                        callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": err });
                    }
                    else {
                        response.statusCode = 0;
                        callback(response);
                    }
                });
            }
            else {
                response.statusCode = 404;
                response.status = 'Project not found';
            }

        }
    } catch (err) {
        console.log(err)
        callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": err });
        return;
    }
}

MyBeepsIntegration.prototype.removeMyBeepsUserIntegrationIDCallback = function (obj, conf, params, res, callback, err, resProjects) {
    try {
        var response = {};
        if (err) {
            console.log("ERROR:======>removeMyBeepsUserIntegrationIDCallback" + err);
            callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": err });
            return;
        } else {
            console.log("SUCCESS:=======>removeMyBeepsUserIntegrationIDCallback" + JSON.stringify(resProjects));
            if (resProjects && resProjects.length > 0) {
                conf.async.each(resProjects, function (project, foreachcallback) {
                    project.myBeepsUserIntegrationID = null;
                    project.save(function (err, savedProject) {
                        if (err) {
                            console.log("ERROR:======>removeMyBeepsUserIntegrationIDCallback.project.save" + err);
                        }
                        else {
                            console.log("SUCCESS:=======>removeMyBeepsUserIntegrationIDCallback.project.save.. PROJECT_ID::=>" + savedProject._id);
                        }
                        foreachcallback();
                    });

                }, function () {
                    callback({ statusCode: 0 });
                });
            }
            else {
                response.statusCode = 404;
                response.status = 'Project not found';
            }
        }
    } catch (err) {
        console.log(err)
        callback({ statusCode: conf.errorConstant.PROCESSING_ERROR, "errorMessage": err });
        return;
    }
}

module.exports.nodeMyBeepsIntegration = nodeMyBeepsIntegration;

