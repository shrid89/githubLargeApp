"use strict";


var request  = require("request");

function nodeBeanstalk(subDomain,token,userName) {
    return new Beanstalk(subDomain,token,userName);
}

function Beanstalk(subDomain,token,userName) {
    Beanstalk.subDomain = subDomain;
	Beanstalk.token = token;
	Beanstalk.userName = userName;
} 

Beanstalk.prototype.validateBeanstalkApiKey = function (params,callback) {
	sendRequest(callback,"/account.json",params);
}

Beanstalk.prototype.getBeanstalkUsersList = function (params,callback) {
	console.log("getUsersList")
	sendRequest(callback,"/users.json",params);
}
Beanstalk.prototype.getBeanstalkUsersDetials = function (params,callback) {
	sendRequest(callback,"/users/"+params.userId+".json",params);
}
Beanstalk.prototype.getBeanstalkInvitationsList = function (params,callback) {
	sendRequest(callback,"/invitations.json",params);
}
Beanstalk.prototype.getBeanstalkInvitationsDetails = function (params,callback) {
	sendRequest(callback,"/invitations/"+params.invitationId+".json",params);
}
Beanstalk.prototype.getBeanstalkRepositoryList = function (params,callback) {
	sendRequest(callback,"/repositories.json",params);
}
Beanstalk.prototype.getBeanstalkRepositoryDetails = function (params,callback) {
	sendRequest(callback,"/repositories/"+params.repoId+".json",params);
}
Beanstalk.prototype.getBeanstalkRepositoryComments = function (params,callback) {
	sendRequest(callback,"/"+params.repoId+"/comments.json",params);
}
Beanstalk.prototype.getBeanstalkRepositoryDeployments = function (params,callback) {
	sendRequest(callback,"/"+params.repoId+"/releases.json",params);
}
Beanstalk.prototype.getDeploymentDetails = function (params,callback) {
	sendRequest(callback,"/"+params.repoId+"/releases/"+params.releaseId+".json",params);
}
Beanstalk.prototype.getBeanstalkCodeReviews = function (params,callback) {
	sendRequest(callback,"/code_reviews.json",params);
}
Beanstalk.prototype.getBeanstalkCodeReviewsForRepository = function (params,callback) {
	sendRequest(callback,"/"+params.repoId+"/code_reviews.json",params);
}
Beanstalk.prototype.getBeanstalkChangeSetList = function (params,callback) {
	sendRequest(callback,"/changesets.json",params);
}
Beanstalk.prototype.getBeanstalkChangeSetDetails = function (params,callback) {	
	sendRequest(callback,"/changesets/repository.json?repository_id="+params.repoId,params);
}

Beanstalk.prototype.createBeanstalkRepository = function (params,callback) {
	console.log("Hey Am Hereeeeeeeeeeeeeee")
	sendPostRequest(callback,"/repositories.json",params.reposData,params);
}
//* error while adding comment internal server error
Beanstalk.prototype.addBeanstalkComment = function (params,callback) {
	sendPostRequest(callback,"/"+params.repoId+"/comments.json",params.commentOnProject,params);
}

function sendRequest(callback,url,params){
    request( {
    	url :"https://"+params.subDomain+".beanstalkapp.com/api"+url,
    	headers : {
		"Authorization" : "Basic " + new Buffer(params.userName + ":" + params.token).toString("base64"),
		"Accept":"application/json",
		"Content-type":"application/json"} 
    }, processResponse.bind(null,callback));
}

function sendPostRequest(callback,url,postData,params){
	console.log("sendPostRequest");
	request.post({
		url: "https://"+params.subDomain+".beanstalkapp.com/api"+url,
        json: postData,
        headers : {
		"Authorization" : "Basic " + new Buffer(params.userName + ":" + params.token).toString("base64"),
		"Accept":"application/json",
		"Content-type":"application/json" }
	}, processPostResponse.bind(null,callback));
}
function processPostResponse(callback,error,response,data){
	console.log("data response.body");
	console.log(response.body);
	if(!error && response.statusCode == 200 ||response.statusCode == 201 ){
        callback({statusCode:0, data:data});
        return;
    }else{		
		callback({statusCode:100, errorMessage:response.body})
        return;
    }
}
function processResponse(callback,error,response,responseData){
	
    if(error){
        callback({statusCode:100, errorMessage:error})
        return;
    }else{
		if(typeof responseData != 'object' || typeof responseData != 'undefined' ){
			responseData = JSON.parse(responseData);
		}
    	callback({statusCode:0, data:responseData});
    }
}

module.exports.nodeBeanstalk = nodeBeanstalk;