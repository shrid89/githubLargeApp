
 "use strict";
/**
* @Easy and simple way of communication between Assembla with nodeJS
* @author Aloha
*/
/**
* require modules needed
*/
var request = require("request");
/**
 * Create node Assembla instance
 * @param {type} apiKey
 * @returns {Assembla}
 */
function nodeAssembla(options) {
    return new Assembla(options);
}
/**
 * Create and validate Assembla
 * @param {type} apiKey,subDomain
 */
function Assembla(options) {
    this.options = '';
    this.authUrl = '';
    this.accessToken = '';
    var options  ={}; //TODO:: remove after testing
    buildAuthUrl(options);
}

function buildAuthUrl(options){
    var oauth2 = require('simple-oauth2')({ 
       clientID: options.clientId,
       clientSecret :options.clientSecret ,
       site: options.site,
       authorizationPath:options.authorizationPath,
       tokenPath: options.tokenPath
    });
    
    Assembla.oauth2 = oauth2;

    var authorization_uri = oauth2.authCode.authorizeURL({      
      redirect_uri: options.redirect_uri,
      response_type :'code',
    });

    Assembla.authUrl = authorization_uri;
    Assembla.options = options;
}

Assembla.prototype.authenticate = function (req, res) {
    res.redirect(Assembla.authUrl);
}

Assembla.prototype.getAccessToken = function(callback,req) {
    var code = req.query.code;
    request.post({
        url:"https://"+Assembla.options.clientId+":"+Assembla.options.clientSecret+"@api.assembla.com/token?grant_type=authorization_code&code="+code,
        json:{
         redirect_uri: 'http://localhost:3000/test'
        },
        headers:{
          'Accept':'application/json',
          'Content-Type':'application/json' 
          }
    }, saveToken.bind(null,callback));
}

function saveToken(callback,error, result) {
  if (error) { 
    console.log('Access Token Error', error.message);
  }else{
    var accessToken = result.access_token;
    console.log(accessToken)
  }
}
//validate Assembla ApiKey
Assembla.prototype.validateAssemblaApiKey = function (params,callback) {
    sendGetRequest(callback,"/user.json",params);
}
/*Get Projects*/
Assembla.prototype.getAssemblaSpaces = function(params,callback) {  
    sendGetRequest(callback,"/spaces.json",params);
} 
/*create Project*/
Assembla.prototype.createAssemblaSpace = function(params,callback) {  
    sendPostRequest(callback,"/spaces.json",params.spaceData,params);
} 

function sendGetRequest (callback,path,params) {
    request({
        url :"https://api.assembla.com/v1"+path,
        headers:{
            "Authorization": "Bearer "+params.token,
            "Accept":"application/json","Content-type":"application/json" 
       }
    } ,processResponse.bind(null,callback));    
}
function sendPostRequest(callback,path,postData,params){
    request.post({
            url :"https://api.assembla.com/v1"+path,
            json:postData,
             headers:{
            "Authorization": "Bearer "+params.token,
            "Accept":"application/json","Content-type":"application/json" 
          }
    }, processPostResponse.bind(null, callback));
}

function processPostResponse(callback,error,response,responseData){
  console.log(response.statusCode);
    console.log(responseData);
   if(!error && response.statusCode == 200 || response.statusCode == 201  || response.statusCode == 204){
        callback({statusCode:0, data:responseData});
        return;
    }else{      
        callback({statusCode:100, errorMessage:response.body})
        return;
    }
}

function processResponse(callback, error, response, responseData) {
    console.log(responseData);
    if(!error && response.statusCode == 200 ) {
        if(typeof responseData != 'object'){
            responseData = JSON.parse(responseData);
        }
        callback({statusCode:0, data:responseData});
        return;
    }
    callback({statusCode:100, errorMessage:error});
    return;
}
/**
* Expose to the world
* @namespace nodeAssembla
*/
module.exports.nodeAssembla = nodeAssembla;
