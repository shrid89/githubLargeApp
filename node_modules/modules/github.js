"use strict";

/**
 * @Easy and simple way of communication between pivotaltracker with nodeJS
 * @author Aloha
 */

/**
 *  require modules needed
 */
var request  = require("request");
var http  = require("client-http");

/**
 * Create node pivotal instance
 * @param {type} token
 * @returns {Pivotal}

var clientId =  '25046e7abd37649f6846';
var clientSecret =  'ac20e07f833adb04b28ebee637c6c578b7c83464';
var site = 'https://Github.com';
var authorizationPath = '/login/oauth/authorize';
var tokenPath = '/login/oauth/access_token';
var grant_type = 'authorization_code';
var redirect_uri = 'http://localhost:3000/test';
var scope = 'repo';
 
 */

var clientId =  '25046e7abd37649f6846';
var clientSecret =  'ac20e07f833adb04b28ebee637c6c578b7c83464';
var site = 'https://Github.com';
var authorizationPath = '/login/oauth/authorize';
var tokenPath = '/login/oauth/access_token';
var grant_type = 'authorization_code';
var redirect_uri = 'http://192.168.9.23:3030/authGithubCallback';
var scope = 'repo';

function nodeGithub(options) {
    return new Github(options);
}

function Github(options) {
    this.options = '';
    this.authUrl = '';
    this.accessToken = '';
    this.userName = '';
    this.header = {"User-Agent": "node.js"} ;

    buildAuthUrl(options);
}

function buildAuthUrl(options){
   var  oauth3 = require('simple-oauth2')({ 
       clientID: clientId,
       clientSecret :clientSecret ,
       site: site,
       authorizationPath:authorizationPath,
       tokenPath: tokenPath
    });

    Github.oauth3 = oauth3;
    var authorization_uri = oauth3.authCode.authorizeURL({      
      redirect_uri: redirect_uri,
      response_type :'code',
      scope : scope
    });

    Github.authUrl = authorization_uri;
    Github.options = options;
}

Github.prototype.authenticate = function (req, res) {
    res.redirect(Github.authUrl);
}

Github.prototype.getAccessToken = function(req,res) {
  	var code = req.query.code;
	Github.oauth3.authCode.getToken({code: code,
		  redirect_uri: redirect_uri,
		   grant_type: grant_type
	 }, saveToken.bind(null, res, req));
}

function saveToken(res, req, error, result) {
  if (error) { 
    console.log('Access Token Error', error.message); 
    res.redirect('/Github/integration');    
  }else{
    var token = Github.oauth3.accessToken.create(result);
    var resultToken = token.token;
    var access_token = ''
    if (resultToken.indexOf(access_token) > -1 ){
        access_token = resultToken.substring(resultToken.indexOf("=")+1,resultToken.indexOf("&"));
        Github.accessToken = access_token;
    }
    res.redirect('/Github/integration');    
   }
}  

 function getUserName(callback, data){
  console.log('@@getUserName')
  console.log(data)
  if (data != null){
    var userInfo = JSON.parse(data);
    Github.userName = userInfo.login;
    callback({statusCode:0, userName:Github.userName , accessToken:Github.accessToken})
    //getUserRepositoryList(callback)
  } else {
    callback({statusCode:100, errorMessage:'No result found'})
  }
}


Github.prototype.getUsers = function (params,callback) {
  console.log(params);
  sendGetRequest(callback,"https://api.Github.com/user?access_token="+params.accessToken);
}

Github.prototype.getUserRepositoryList = function (params,callback) {
  console.log(params.userName)
  sendGetRequest(callback,"https://api.Github.com/users/"+params.userName+"/repos?access_token="+params.accessToken);
}

Github.prototype.getRepoIssue = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/repos/"+params.repoOwner+"/"+params.repoName+"/issues?access_token="+params.accessToken);
}

Github.prototype.getRepoListPull = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/repos/"+params.repoOwner+"/"+params.repoName+"/pulls?access_token="+params.accessToken);
}

Github.prototype.getRepoCommits = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/repos/"+params.repoOwner+"/"+params.repoName+"/commits?access_token="+params.accessToken);
}

Github.prototype.getPublicEvents = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/events?access_token="+params.accessToken);
}

Github.prototype.getAllIssue = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/issues?access_token="+params.accessToken);
}

Github.prototype.getFeeds = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/feeds?access_token="+params.accessToken);
}

Github.prototype.getNotifications = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/notifications?access_token="+params.accessToken);
}

Github.prototype.getGists = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/gists?access_token="+params.accessToken);
}

Github.prototype.getGistsComments = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/gists/"+params.gistsId+"/comments?access_token="+params.accessToken);
}

Github.prototype.getOrganizationList = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/users/"+params.userName+"/orgs?access_token="+params.accessToken);
}

Github.prototype.getOrganizationRepositoryList = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/orgs/"+params.orgnizationName+"/repos?access_token="+params.accessToken);
}

Github.prototype.createGistsComments = function (params,callback) {
  sendPostRequest(callback,"https://api.Github.com/gists/"+params.gistsId+"/comments?access_token="+params.accessToken,params.createCommentParams);
}

Github.prototype.createSingleCommit = function (params,callback) {
  sendPostRequest(callback,"https://api.Github.com/repos/"+params.repoOwner+"/"+params.repoName+"/git/commits?access_token="+params.accessToken,params.createCommitParams);
}

Github.prototype.createIssue = function (params,callback) {
  sendPostRequest(callback,"https://api.Github.com/repos/"+params.repoOwner+"/"+params.repoName+"/issues?access_token="+params.accessToken,params.createIssueParams);
}

Github.prototype.commentOnIssue = function (params,callback) {
  sendPostRequest(callback,"https://api.Github.com/repos/"+params.repoOwner+"/"+params.repoName+"/issues/"+params.issueId+"/comments?access_token="+params.accessToken,params.commentIssueParams);
}

Github.prototype.deleteGistsComments = function (params,callback) {
  sendPostRequestDel(callback,"https://api.Github.com/gists/"+params.gistsId+"/comments/"+params.commentId+"?access_token="+params.accessToken);
}

Github.prototype.searchInRepository = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/search/repositories?access_token="+params.accessToken+params.queryParams);
}

Github.prototype.searchInUsers = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/search/users?access_token="+params.accessToken+params.usersQueryParams);
}

Github.prototype.searchInCode = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/search/code?access_token="+params.accessToken+params.codeQueryParams);
}

Github.prototype.searchIssue = function (params,callback) {
  sendGetRequest(callback,"https://api.Github.com/search/issues?access_token="+params.accessToken+params.issueQueryParams);
}

function sendPostRequestDel(callback,path) {
  request.del({url: path,headers: {"User-Agent": "node.js"}},processResponse.bind(null,callback));
}

function sendPostRequest(callback,path,object) {
  console.log(path)
  console.log(object)
  request.post(
    {url: path,
      json:object,
      headers: {"User-Agent": "node.js"}
  },processResponse.bind(null,callback));
}

function sendGetRequest(callback,path) {
  request(
    {url: path,
      headers: {"User-Agent": "node.js"} 
  },processResponse.bind(null,callback));
}

function processResponse(callback,error, response, data) {
  if(!error && (response.statusCode == 200 || response.statusCode == 201  )) {
    if(typeof data != "object"){
      data = JSON.parse(data);
    }
    callback({statusCode:0, data:data});
    return;
  }else if(error != null && typeof(error) != 'undefined'){
    callback({statusCode:100, errorMessage:error});
  }else{
    if(typeof data != "object"){
      data = JSON.parse(data);
    }
    callback({statusCode:100, errorMessage:data.message});
  }
}

/**
 * Expose to the world
 * @namespace nodeCloudSixSix
 */
module.exports.nodeGithub = nodeGithub;