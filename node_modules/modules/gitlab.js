
 
 "use strict";
/**
* @Easy and simple way of communication between Gitlab with nodeJS
* @author Aloha
*/

/**
* require modules needed
*/

var request = require("request");

/**
 * Create node Gitlab instance
 * @param {type} token
 * @returns {Gitlab}
 */

function nodeGitlab(token) {
    return new Gitlab(token);
}

/**
 * Create and validate Gitlab
 * @param {type} token
 */

function Gitlab(token) {
    Gitlab.token = token;
}

Gitlab.prototype.validateGitlabApiKey = function (params,callback) {
    sendRequest(callback,"/projects?private_token="+params.token);
}

Gitlab.prototype.getGitlabProject = function (params,callback) {
    sendRequest(callback,"/projects?private_token="+params.token);
}

Gitlab.prototype.createGitlabProject = function (params,callback) {
    sendPostRequest(callback,"/projects?private_token="+params.token,params);
}

function sendRequest(callback,url) {
    request.get({
        url :"https://gitlab.com/api/v3"+url
    },processResponse.bind(null,callback))
}

function sendPostRequest(callback,url,params) {
    request.post({
        url:"https://gitlab.com/api/v3"+url,
        json: params.postData,
    },processResponse.bind(null, callback));
}

function processResponse(callback,error, response, data) {
   console.log(data)
   console.log(response.statusCode)
    if(!error && response.statusCode == 200  || response.statusCode == 201) {
        if(typeof data != "object"){
            data = JSON.parse(data);
        }
        callback({statusCode:0, data:data});
        return;
    }if(response.statusCode == 400){
        callback({statusCode:100, errorMessage:data.message});
    }


    if(error != null && error != "undefined"){
        callback({statusCode:100, errorMessage:error});
         return;
    }
}
/**
* Expose to the world
* @namespace nodeGitlab
*/

 module.exports.nodeGitlab = nodeGitlab

