
"use strict";

var request = require("request");



function nodeBitbucket(options) {
  return new Bitbucket(options)
}



function Bitbucket(options) {
    
}

/*

{ consumer_key: 'wAUbTN5bC5sUMmZVcf',
  consumer_secret: 'RN9Qe4WkK9YL6ax4a2YrPmatRrGG9QUT',
  token: 'dcFuLpUarLuAZSDUWR',
  token_secret: 'dDgZbZJNd9p3BVxLuEBbqGkxTkrvdKZ6' }

*/

Bitbucket.prototype.authenticate = function (params, callback) { 
    Bitbucket.consumerKey = params.consumerKey;
    Bitbucket.consumerSecret = params.consumerSecret;
    params.consumerSecret;

    var qs = require('querystring')
   , oauth =
        { callback: params.callback
        , consumer_key: params.consumerKey
        , consumer_secret: params.consumerSecret
        }
  , url = 'https://bitbucket.org/api/1.0/oauth/request_token'; 
    request.post({ url:url, oauth:oauth}, GetAutorizationURL.bind(null,callback));
    
}

function GetAutorizationURL (callback,error,response,body){
    var oauth_token_secret = "";
    var oauth_token = "";
    var AuthorizeUrl = ""
    if(body.indexOf("oauth_token_secret") > -1 && body.indexOf("&") > -1 && body.indexOf("=") > -1){
        var splitString = body.split("&");
        var splitStringWithEqualTo = splitString[0].split("=");
        var splitStringWithEqualTo1 = splitString[1].split("=");
        oauth_token_secret = splitStringWithEqualTo[1];
        oauth_token = splitStringWithEqualTo1[1];
        Bitbucket.oauthTokenSecret = oauth_token_secret;
        AuthorizeUrl = "https://bitbucket.org/api/1.0/oauth/authenticate?"+qs.stringify({oauth_token: oauth_token});
    } 
    if(AuthorizeUrl != '' && AuthorizeUrl != 'undefined' ){
        callback({StatusCode:0 ,Bitbucketurl:Bitbucket.AuthorizeUrl});    
    }else{
        callback({StatusCode:100 , error:body});    
    }    
}

Bitbucket.prototype.getAccessToken = function(req,res,callback) {
    var auth_data = qs.parse(req.query)
    , oauth =
      { consumer_key: Bitbucket.consumerKey
      , consumer_secret: Bitbucket.consumerSecret
      , token: req.query.oauth_token
      , token_secret: Bitbucket.oauthTokenSecret
      , verifier: req.query.oauth_verifier
      }
    , url = 'https://bitbucket.org/api/1.0/oauth/access_token';

    request.post({
        url:url, 
        oauth:oauth,
        headers :{"Accept":"application/json","Content-Type":"application/json"}
    },SaveAceessToken.bind(null,callback)); 
    
}

function SaveAceessToken(callback,error,response,body){
    if(body.indexOf("&") > -1 && body.indexOf("=") > -1 ){
        var splitString = body.split("&");
        var splitStringWithEqualTo = splitString[0].split("=");
        var splitStringWithEqualTo1 = splitString[1].split("=");
        Bitbucket.token = splitStringWithEqualTo1[1];
        Bitbucket.tokenSecret = splitStringWithEqualTo[1];
        callback({StatusCode:0 ,token:Bitbucket.token,tokenSecret:Bitbucket.tokenSecret});  
    }else{
        callback({StatusCode:100 , error:body});
    }
}

Bitbucket.prototype.validateBitbucketApiKey = function(params,callback) {
    sendGetRequest(callback,"/1.0/user",params);
}

Bitbucket.prototype.getUsersList = function(params,callback) {
    sendGetRequest(callback,"/1.0/user",params);
}

Bitbucket.prototype.getUserDetails = function(params,callback) {
    sendGetRequest(callback,"/2.0/users/"+params.userName,params);
}

Bitbucket.prototype.getUsersRepositoryList = function(params,callback) {
    sendGetRequest(callback,"/1.0/user/repositories",params);
}

/* not working 301 moved parmanantly
Bitbucket.prototype.getUserRepositoryList = function(params,callback) {
    sendGetRequest(callback,"/2.0/users/"+params.userName+"/repositories",params);
}

aloharepo


*/

Bitbucket.prototype.getRepositoryList = function(params,callback) {
    sendGetRequest(callback,"/2.0/repositories",params);
}

Bitbucket.prototype.getRepositoryDetails = function(params,callback) {
    sendGetRequest(callback,"/2.0/repositories/"+params.repoOwner,params);
}

Bitbucket.prototype.getRepositoryIssueList = function(params,callback) {
    sendGetRequest(callback,"/1.0/repositories/"+params.accountName+"/"+params.repoSlug+"/issues",params);
}

Bitbucket.prototype.getRepositoryIssueDetails = function(params,callback) {
    sendGetRequest(callback,"/1.0/repositories/"+params.accountName+"/"+params.repoSlug+"/issues/"+params.issueId,params);
}

Bitbucket.prototype.getRepositoryIssueCommentsList = function(params,callback) {
    sendGetRequest(callback,"/1.0/repositories/"+params.accountName+"/"+params.repoSlug+"/issues/"+params.issueId+"/comments",params);
}

Bitbucket.prototype.getRepositoryIssueCommentsDetails = function(params,callback) {
    sendGetRequest(callback,"/1.0/repositories/"+params.accountName+"/"+params.repoSlug+"/issues/"+params.issueId+"/comments/"+params.commentId,params);
}

Bitbucket.prototype.getRepositoryChangeSetList = function(params,callback){
    sendGetRequest(callback,"/1.0/repositories/"+params.accountName+"/"+params.repoSlug+"/changesets/",params);
}

Bitbucket.prototype.getRepositoryChangeSetDetails = function(params,callback){
    sendGetRequest(callback,"/1.0/repositories/"+params.accountName+"/"+params.repoSlug+"/changesets/"+params.rawNode,params);
}

Bitbucket.prototype.getRepositoryChangeSetComments = function(params,callback){
    sendGetRequest(callback,"/1.0/repositories/"+params.accountName+"/"+params.repoSlug+"/changesets/"+params.rawNode+"/comments",params);
}

Bitbucket.prototype.getRepositoryPullRequestsList = function(params,callback){
    sendGetRequest(callback,"/2.0/repositories/"+params.repoOwner+"/"+params.repoSlug+"/pullrequests",params);
}

Bitbucket.prototype.getRepositoryPullRequestsDetails = function(params,callback){
    sendGetRequest(callback,"/2.0/repositories/"+params.repoOwner+"/"+params.repoSlug+"/pullrequests/"+params.pullId,params);
}

Bitbucket.prototype.getRepositoryPullRequestsComments = function(params,callback){
    sendGetRequest(callback,"/2.0/repositories/"+params.repoOwner+"/"+params.repoSlug+"/pullrequests/"+params.pullId+"/comments",params);
}

Bitbucket.prototype.getRepositoryPullRequestsChangeSet = function(params,callback){
    sendGetRequest(callback,"/2.0/repositories/"+params.accountName+"/"+params.repoSlug+"/pullrequests/"+params.pullId+"/changesets",params);
}

Bitbucket.prototype.getRepositoryCommitsList = function(params,callback){
    sendGetRequest(callback,"/2.0/repositories/"+params.repoOwner+"/"+params.repoSlug+"/commits/"+params.revision,params);
}

Bitbucket.prototype.getRepositoryCommitsComments = function(params,callback){
    sendGetRequest(callback,"/2.0/repositories/"+params.repoOwner+"/"+params.repoSlug+"/commits/"+params.revision+"/comments",params);
}

Bitbucket.prototype.createIssueInRepository = function(params,callback){
    /* requierd params
    1.  title
    2.  content
    */
    sendPostRequest(callback,"/1.0/repositories/"+params.accountName+"/"+params.repoSlug+"/issues",params);
}

Bitbucket.prototype.commentOnIssue = function(params,callback){
    /* requierd params
    1.  content
    */
    sendPostRequest(callback,"/1.0/repositories/"+params.accountName+"/"+params.repoSlug+"/issues/"+params.issueId+"/comments",params);
}

Bitbucket.prototype.commentOnChangeSets = function(params,callback){
    /* requierd params
    1.  content
    */
    sendPostRequest(callback,"/1.0/repositories/"+params.accountName+"/"+params.repoSlug+"/changesets/"+params.rawNode+"/comments",params);
}

Bitbucket.prototype.commentOnPullRequest = function(params,callback){
    /* requierd params
    1.  content
    */
    sendPostRequest(callback,"/1.0/repositories/"+params.accountName+"/"+params.repoSlug+"/pullrequests/"+params.pullId+"/comments",params);
}

Bitbucket.prototype.createNewRepository = function(params,callback){
    /* requierd params
    1.  name
    */
    sendPostRequest(callback,"/1.0/repositories",params);
}


/* pullrequests not working error 

{
"error": {
"fields": {
"destination": [
"changeset not found: a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"
]
},
"message": "Bad request"
}
}



{
  "title": "title",
  "description": "description",
  "source": {
    "branch": {
      "name": "master"
    },
    "repository": {
      "full_name": "malpania/aloharepo"
    }
  },
  "destination": {
    "branch": {
      "name": "master"
    },
    "commit": {
      "hash": "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"
    }
  },
  "reviewers": [
    {
      "username": "malpania"
    }
  ],
  "close_source_branch": true
}

*/

function sendGetRequest(callback,path,params){
     var qs1 = require('querystring')
    , oauth =
        { 
          consumer_key: params.consumerKey
        , consumer_secret: params.consumerSecret
        , token: params.token
        , token_secret: params.tokenSecret
        }
    , url = 'https://bitbucket.org/api'+path;
    request.get({
        url:url, 
        oauth:oauth,
        json:true
    },processResponse.bind(null,callback));
}
 
function sendPostRequest(callback,path,params){
     var qs1 = require('querystring')
    , oauth =
        { 
          consumer_key: params.consumerKey
        , consumer_secret: params.consumerSecret
        , token: params.token
        , token_secret: params.tokenSecret
        }
    , url = 'https://bitbucket.org/api'+path;
    request.post({
        url:url, 
        oauth:oauth,
        headers:{"Content-Type":"application/json"},
        json:params.formData}
    ,processResponse.bind(null,callback));
}


function processResponse(callback,error,response,body){    
    console.log(response.statusCode);
    console.log(body);
  if(!error && (response.statusCode == 200||response.statusCode == 201) ) {
    if(typeof body != "object"){
      body = JSON.parse(body);
    }
    callback({statusCode:0, data:body});
    return;
  }else if(typeof(body) != 'undefined' && body != null && body != ''){
      if(typeof body != "object"){
         body = JSON.parse(body);
      }
      if(typeof(body.errorMessages) != 'undefined' && body.errorMessages != null ){
        callback({statusCode:100, errorMessage:body.errorMessages});
      }else{
        callback({statusCode:100, errorMessage:null});
      }
  }else{
    callback({statusCode:100, errorMessage:null});
  }
}

module.exports.nodeBitbucket = nodeBitbucket;