
redis = require('redis');
request = require('request');
masterChannel = 'codejenie'


function nodeSocketSession() {
    return new SocketSession();
}

function SocketSession() {
    this.sub = redis.createClient();
    this.pub = redis.createClient();
}

//SocketSession.prototype.subscribe = function (socket, organizationID) {
//    this.sub.on('message', function (channel, message) {
//        message = JSON.parse(message);
//        if (message.socketID != socket.id || message.emitUsers.indexOf(socket.userId.toString()) != -1) {
//            if (typeof socket.userId != 'undefined' && (message.emitUsers.indexOf(socket.userId.toString()) != -1 || socket.userId == message.emitData.senderUserID)) {
//                socket.emit(channel, message.emitData);
//            }
//        }
//    });
//    var messageEvent = 'serverEvent_' + organizationID;
//    this.sub.subscribe(messageEvent);
//};

SocketSession.prototype.subscribe = function (channelName) {
    this.sub.on('message', function (channel, message) {
        console.log('####### inside this.sub.on Message for W1');
        message = JSON.parse(message);  
        console.log('*************** MESSAGE WORKSTATION WORKER_ID  ::=> ' + message.workstation.workerID);
        console.log('*************** MESSAGE WORKSTATION HOST  ::=> ' + message.workstation.host);
        console.log('*************** MESSAGE WORKSTATION PORT  ::=> ' + message.workstation.port);
        console.log('*************** GLOBAL _workerID ::=> ' + _workerID);
        
        //if (message.workstation.host === 'http://192.168.8.47' && (message.workstation.port === '5051' || message.workstation.port === 5051)) {
        if (_workerID === message.workstation.workerID) {
            console.log('***************' + _workerID + ' ::==>> Yes, this for Me ********************');
            console.log('Files :: =>' + JSON.stringify(message.emitData.file._id));
            _allModule.RedisCluster.setMeFree(false, message.emitData.file._id, function (res) {
                if (res.statusCode) {
                    console.log('@@ Fail :: ==> _allModule.RedisCluster.setMeFree FALSE  ');
                    console.log('-----------------------------------------------------------------');
                }
                else {
                    _allModule.CodeReviewEngine.startCodeReviewEngine(message, function (res) {
                        
                        var replyMessage = {};
                        replyMessage.workstation = {};
                        replyMessage.emitData = {};
                        replyMessage.emitData = message.emitData;
                        replyMessage.emitData.file.isFileCritical = res.isFileCritical?res.isFileCritical:false;
                        replyMessage.emitData.file.ruleTypeCounts = res.ruleTypeCounts;

                        
                        replyMessage.workstation.workerID = 'master_worker';
                        replyMessage.workstation.childWorkerID = message.workstation.workerID;
                        replyMessage.organizationID = masterChannel;

                        if (res.statusCode) {
                            console.log('@@ Fail :: ==> _allModule.CodeReviewEngine.startCodeReviewEngine  ' + res.changeSetID);
                            console.log('-----------------------------------------------------------------');
                            replyMessage.workstation.jobStatus = 0;//0:Fail;
                        }
                        else {
                            console.log('** SUCCESS :: ==> _allModule.CodeReviewEngine.startCodeReviewEngine ==> CodeReview Completed For ChangeSetID ::==> ' + res.changeSetID);
                            console.log('-----------------------------------------------------------------');
                            replyMessage.workstation.jobStatus = 1;//1:done;
                            
                            
                            _allModule.RedisCluster.removeFileFromDisk(message, function (res) {
                                if (res.statusCode) {
                                    console.log('@@ Fail :: ==> _allModule.RedisCluster.removeFileFromDisk  ' + message.emitData.file._id);
                                    console.log('-----------------------------------------------------------------');
                                }
                                else {
                                    console.log('** SUCCESS :: ==> _allModule.RedisCluster.removeFileFromDisk::==> ' + message.emitData.file._id);
                                    console.log('-----------------------------------------------------------------');
                                }
                            });
                        }
                        
                        _allModule.RedisCluster.setMeFree(true, null, function (res) {
                            if (res.statusCode) {
                                console.log('@@ Fail :: ==> _allModule.RedisCluster.setMeFree TRUE ');
                                console.log('-----------------------------------------------------------------');
                            }
                            else {
                                console.log('** SUCCESS :: ==> _allModule.RedisCluster.setMeFree TRUE ');
                                console.log('-----------------------------------------------------------------');
                            }
                             
                            replyMessage = JSON.stringify(replyMessage);
                            
                            //Reply back to Master Worker
                            _allModule.SocketModule.publish(replyMessage, function (res) {
                                if (res.statusCode) {
                                    console.log('@@ Fail :: ==>  Reply Back To Master :: ==> _allModule.SocketModule.publish  ');
                                    console.log('-----------------------------------------------------------------');
                                }
                                else {
                                    console.log('** SUCCESS :: ==>  Reply Back To Master :: ==> _allModule.SocketModule.publish  ');
                                }
                            });
                        });
                        
                    });
                }
            });
            console.log('************************************************************************');
        }
    });
    var messageEvent = 'serverEvent_' + masterChannel;
    this.sub.subscribe(messageEvent);
};


SocketSession.prototype.rejoin = function (socket, message, callback) {
    this.sub.on('message', function (channel, message) {
        message = JSON.parse(message);
        if (message.socketID != socket.id || message.emitUsers.indexOf(socket.userId.toString()) != -1) {
            if (typeof socket.userId != 'undefined' && (message.emitUsers.indexOf(socket.userId.toString()) != -1 || socket.userId == message.emitData.senderUserID)) {
                socket.emit(channel, message.emitData);
            }
        }
    });
    message = JSON.parse(message);
    var messageEvent = 'serverEvent_' + message.organizationID;
    this.sub.subscribe(messageEvent);
    callback();
};

SocketSession.prototype.unsubscribe = function (organizationID) {
    var messageEvent = 'serverEvent_' + organizationID;
    this.sub.unsubscribe(messageEvent);
};

SocketSession.prototype.publish = function (message, callback) {
    try {
        var parsedMessage = JSON.parse(message);
        var messageEvent = 'serverEvent_' + parsedMessage.organizationID;
        this.pub.publish(messageEvent, message);
        
        /*************************** Publish emitData for Web ****************************************************/
        //var emitData = {};
        //emitData.projectID = parsedMessage.emitData.header.projectID;
        //emitData.organizationID = parsedMessage.emitData.header.organizationID;
        //emitData.organizationID = parsedMessage.emitData.header.organizationID;
        //emitData.userIntegrationID = parsedMessage.emitData.header.userIntegrationID;
        //emitData.status = parsedMessage.emitData.header.status;
        
        //emitData.path = parsedMessage.emitData.file.path;
        //emitData.changeSetID = parsedMessage.emitData.file.changeSetID;
        //emitData.author = parsedMessage.emitData.file.changeSetID;
        //emitData.changeSetLog = parsedMessage.emitData.file.changeSetLog;
        //emitData.channgeSetModifyDate = parsedMessage.emitData.file.channgeSetModifyDate;
        
        //emitData.codeReviewComments = parsedMessage.codeReviewComments;
        //emitData.serverEvent = 'newFileCodeReviewed';

        //var emitMessage = { action: 'message', organizationID: parsedMessage.emitData.header.organizationID, emitData: emitData };
        //emitMessage = JSON.stringify(emitMessage);

        //var organizationEvent = 'serverEvent_' + parsedMessage.emitData.header.organizationID;
        //this.pub.publish(organizationEvent, emitMessage);
        
        
        callback({ statusCode: 0 });
    }
    catch (err) {
        callback({ statusCode: 500 });
    }
};

SocketSession.prototype.destroyRedis = function () {
    if (this.sub !== null)
        this.sub.end();
    if (this.pub !== null)
        this.pub.end();
};



//function emitServerEvent(gc, socket, userID, emitMessage) {
//    try {
//        if (socket != undefined) {
//            emitMessage.socketID = socket.id;
//            if (socket.SocketSession === null || typeof socket.SocketSession == 'undefined') {
//                var newSocketSession = new gc.SocketSession(userID);
//                socket.SocketSession = newSocketSession;
//                socket.userId = userID;
//                var messageReply = JSON.stringify(emitMessage);
//                newSocketSession.rejoin(socket, messageReply, function () {
//                    socket.SocketSession.publish(messageReply);
//                });
//            } else {
                
//                var messageReply = JSON.stringify(emitMessage);
//                socket.SocketSession.publish(messageReply);
//            }
//        }
//    } catch (err) {
//        console.log('emitServerEvent==>error : ', err);
//    }
//}

module.exports.nodeSocketSession = nodeSocketSession;